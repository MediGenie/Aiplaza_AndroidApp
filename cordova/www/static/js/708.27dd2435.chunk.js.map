{"version":3,"file":"static/js/708.27dd2435.chunk.js","mappings":"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","sources":["components/LinearSlide/LinearSlide.tsx","components/RangeSlide/RangeSlide.tsx","components/ServiceFormEditor/components/SectionInputBox.tsx","components/ServiceFormEditor/components/SectionInputLine.tsx","components/ServiceFormEditor/icons.ts","components/ServiceFormEditor/components/ColumnItem.tsx","components/ServiceFormEditor/components/SectionItem.tsx","components/ServiceFormEditor/components/ServiceFormContentManager.tsx","components/ServiceFormEditor/form-context.ts","components/ServiceFormEditor/hooks/useFormDispatchContext.ts","components/ServiceFormEditor/components/CheckboxSettingEditor.tsx","components/ServiceFormEditor/components/DropdownSettingEditor.tsx","components/ServiceFormEditor/components/FileSettingEditor.tsx","components/NumberInputBox/NumberInputBox.tsx","components/ServiceFormEditor/components/LinearSettingEditor.tsx","components/ServiceFormEditor/components/NumberSettingEditor.tsx","components/ServiceFormEditor/components/RadioSettingEditor.tsx","components/ServiceFormEditor/components/SlideSettingEditor.tsx","components/ServiceFormEditor/components/SpinerSettingEditor.tsx","components/ServiceFormEditor/components/TextSettingEditor.tsx","components/ServiceFormEditor/hooks/useFormValueContext.ts","components/ServiceFormEditor/EditorAreaSetting.tsx","components/ServiceFormEditor/EditorArea.tsx","modals/AddImageModal.tsx","modals/AddTableModal.tsx","components/ServiceFormEditor/components/Table.tsx","components/ServiceFormEditor/components/ColumnCheckboxEditor.tsx","components/ServiceFormEditor/components/ColumnDropDownEditor.tsx","components/ServiceFormEditor/components/ColumnFileEditor.tsx","components/ServiceFormEditor/components/LinearPreview.tsx","components/ServiceFormEditor/components/ColumnLinearEditor.tsx","components/ServiceFormEditor/components/ColumnNumberEditor.tsx","components/ServiceFormEditor/components/ColumnRadioEditor.tsx","components/ServiceFormEditor/components/RangePreview.tsx","components/ServiceFormEditor/components/ColumnSliderEditor.tsx","components/ServiceFormEditor/components/ColumnSpinerEditor.tsx","components/ServiceFormEditor/components/ColumnTextEditor.tsx","components/ServiceFormEditor/components/ColumnTitleEditor.tsx","components/ServiceFormEditor/components/ColumnEditor.tsx","components/ServiceFormEditor/components/SectionEditor.tsx","components/ServiceFormEditor/FormArea.tsx","components/ServiceFormEditor/ServiceFormEditor.tsx","components/ServiceFormEditor/types.ts","components/SpinnerInputBox/SpinnerInputBox.tsx"],"sourcesContent":["import { FC } from \"react\";\nimport { Range, getTrackBackground } from \"react-range\";\n\ninterface LinearSlideProps {\n  value: number;\n  minValue: number;\n  maxValue: number;\n  onChange?: (next: number) => void;\n  disabled?: boolean;\n}\n\nexport const LinearSlide: FC<LinearSlideProps> = ({\n  maxValue,\n  minValue,\n  value,\n  onChange,\n  disabled,\n}) => {\n  return (\n    <div>\n      <div className=\"flex justify-center flex-wrap\">\n        <Range\n          disabled={disabled}\n          step={1}\n          min={minValue}\n          max={maxValue}\n          values={[value]}\n          onChange={([next]) => onChange?.(next)}\n          renderTrack={({ props, children }) => (\n            <div\n              onMouseDown={props.onMouseDown}\n              onTouchStart={props.onTouchStart}\n              style={{\n                ...props.style,\n                height: \"36px\",\n                display: \"flex\",\n                width: \"100%\",\n              }}\n            >\n              <div\n                ref={props.ref}\n                style={{\n                  height: \"6px\",\n                  width: \"100%\",\n                  borderRadius: \"4px\",\n                  background: getTrackBackground({\n                    values: [value],\n                    colors: [\"#E5E5EA\", \"#E5E5EA\"],\n                    min: minValue,\n                    max: maxValue,\n                  }),\n                  alignSelf: \"center\",\n                }}\n              >\n                {children}\n              </div>\n            </div>\n          )}\n          renderThumb={({ props, isDragged }) => (\n            <div\n              {...props}\n              style={{\n                ...props.style,\n                height: \"16px\",\n                width: \"16px\",\n                borderRadius: \"12px\",\n                backgroundColor: \"#007AFF\",\n                boxShadow: \"0px 2px 4px rgba(28, 28, 30, 0.25)\",\n              }}\n            ></div>\n          )}\n          renderMark={({ props }) => (\n            <div\n              {...props}\n              style={{\n                ...props.style,\n                width: 24,\n                height: 24,\n                backgroundColor: \"#E5E5EA\",\n                borderRadius: 99,\n              }}\n            ></div>\n          )}\n        />\n      </div>\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport { Range, getTrackBackground } from \"react-range\";\ninterface RangeSlideProps {\n  min: number;\n  max: number;\n  value: number[];\n  onChange: (next: number[]) => void;\n  disabled?: boolean;\n}\n\nexport const RangeSlide: FC<RangeSlideProps> = ({\n  min,\n  max,\n  onChange,\n  value,\n  disabled,\n}) => {\n  return (\n    <div className=\"flex justify-center flex-wrap\">\n      <Range\n        disabled={disabled}\n        step={0.1}\n        min={min}\n        max={max}\n        values={value}\n        onChange={onChange}\n        renderTrack={({ props, children }) => (\n          <div\n            onMouseDown={props.onMouseDown}\n            onTouchStart={props.onTouchStart}\n            style={{\n              ...props.style,\n              height: \"36px\",\n              display: \"flex\",\n              width: \"100%\",\n            }}\n          >\n            <div\n              ref={props.ref}\n              style={{\n                height: \"6px\",\n                width: \"100%\",\n                borderRadius: \"4px\",\n                background: getTrackBackground({\n                  values: value,\n                  colors:\n                    value.length === 1\n                      ? [\"#007AFF\", \"#C7C7CC\"]\n                      : [\"#C7C7CC\", \"#007AFF\", \"#C7C7CC\"],\n                  min: min,\n                  max: max,\n                }),\n                alignSelf: \"center\",\n              }}\n            >\n              {children}\n            </div>\n          </div>\n        )}\n        renderThumb={({ props, isDragged, index }) => (\n          <div\n            {...props}\n            style={{\n              ...props.style,\n              height: \"24px\",\n              width: \"24px\",\n              borderRadius: \"12px\",\n              border: \"1px solid #FFFFFF\",\n              backgroundColor: \"#007AFF\",\n              boxShadow: \"0px 2px 4px rgba(28, 28, 30, 0.25)\",\n            }}\n            className=\"group\"\n          >\n            <div\n              className={classNames(\n                \"hidden group-hover:block bg-white absolute origin-top-left top-3 left-3 px-2.5 rounded rounded-tl-none\",\n                {\n                  \"!block\": isDragged,\n                }\n              )}\n              style={{ boxShadow: \"0px 2px 4px rgba(28, 28, 30, 0.25)\" }}\n            >\n              <span className=\"text-blue500 text-[14px] leading-[22px]\">\n                {value[index].toFixed(1)}\n              </span>\n            </div>\n          </div>\n        )}\n      />\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { FC, DetailedHTMLProps, InputHTMLAttributes } from 'react';\n\ninterface SectionInputBoxProps\n  extends DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  > {}\n\nexport const SectionInputBox: FC<SectionInputBoxProps> = ({\n  className,\n  ...props\n}) => {\n  return (\n    <input\n      className={classNames(\n        'bg-white bg-opacity-30 border border-white py-3 px-[15px] text-white placeholder:text-white text-b3 rounded',\n        className\n      )}\n      {...props}\n    />\n  );\n};\n","import classNames from 'classnames';\nimport { FC, DetailedHTMLProps, InputHTMLAttributes } from 'react';\n\ninterface SectionInputLineProps\n  extends DetailedHTMLProps<\n    InputHTMLAttributes<HTMLInputElement>,\n    HTMLInputElement\n  > {}\n\nexport const SectionInputLine: FC<SectionInputLineProps> = ({\n  className,\n  ...props\n}) => {\n  return (\n    <input\n      className={classNames(\n        'pb-3 px-[15px] text-b3 border-b border-white placeholder:text-white text-white bg-transparent',\n        className\n      )}\n      {...props}\n    />\n  );\n};\n","import {\n  cehckbox,\n  dropdown,\n  fileupload,\n  linearField,\n  numberField,\n  radioField,\n  sliderField,\n  spinerField,\n  textField,\n  title,\n} from '../../icons';\nimport { FormColumnType } from './types';\n\nexport const ColumnTypeToIconMap: Record<FormColumnType, string> = {\n  [FormColumnType.TITLE]: title,\n  [FormColumnType.TEXT]: textField,\n  [FormColumnType.NUMBER]: numberField,\n  [FormColumnType.FILE]: fileupload,\n  [FormColumnType.DROPROWN]: dropdown,\n  [FormColumnType.RADIO]: radioField,\n  [FormColumnType.CHECKBOX]: cehckbox,\n  [FormColumnType.SLIDE]: sliderField,\n  [FormColumnType.SPINNER]: spinerField,\n  [FormColumnType.LINEAR]: linearField,\n};\n","import { FC } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { copy, deleteIcon, move } from '../../../icons';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { FormColumnType } from '../types';\n\ninterface ColumnItemProps {\n  draggableId: string;\n  index: number;\n  type: FormColumnType;\n  onCopy?: () => void;\n  onRemove?: () => void;\n}\n\nconst TypeToStrMap: Record<FormColumnType, string> = {\n  [FormColumnType.TITLE]: '제목 및 설명',\n  [FormColumnType.TEXT]: '텍스트필드',\n  [FormColumnType.NUMBER]: '숫자필드',\n  [FormColumnType.FILE]: '파일업로드',\n  [FormColumnType.DROPROWN]: '드롭다운',\n  [FormColumnType.RADIO]: '라디오 버튼',\n  [FormColumnType.CHECKBOX]: '체크박스',\n  [FormColumnType.SLIDE]: '슬라이드',\n  [FormColumnType.SPINNER]: '스피너',\n  [FormColumnType.LINEAR]: '선형배율',\n};\n\nexport const ColumnItem: FC<ColumnItemProps> = ({\n  draggableId,\n  index,\n  type,\n  onCopy,\n  onRemove,\n}) => {\n  return (\n    <Draggable draggableId={draggableId} index={index}>\n      {(provided) => {\n        return (\n          <div\n            className=\"pt-5 select-none\"\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n          >\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center space-x-2.5\">\n                <div {...provided.dragHandleProps} className=\"w-6 h-6\">\n                  <img\n                    src={move}\n                    className=\"w-6 h-6 block\"\n                    alt=\"자리 이동 버튼\"\n                  />\n                </div>\n                <div className=\"flex items-center py-0.5 px-1 bg-gray100 rounded space-x-0.5\">\n                  {ColumnTypeToIconMap[type] && (\n                    <img\n                      src={ColumnTypeToIconMap[type]}\n                      alt=\"아이콘\"\n                      className=\"w-4 h-4\"\n                    />\n                  )}\n                  <span\n                    className=\"text-gray400 block w-4 text-center\"\n                    style={{ fontSize: 14, lineHeight: '20px' }}\n                  >\n                    {index + 1}\n                  </span>\n                </div>\n                <p className=\"text-b3\">{TypeToStrMap[type] || '알 수 없음'}</p>\n              </div>\n              <div className=\"flex items-center space-x-2.5\">\n                <button type=\"button\" onClick={onCopy}>\n                  <img src={copy} alt=\"복사\" className=\"w-6 h-6 block\" />\n                </button>\n                <button type=\"button\" onClick={onRemove}>\n                  <img src={deleteIcon} alt=\"삭제\" className=\"w-6 h-6 block\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n      }}\n    </Draggable>\n  );\n};\n","import { FC } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { copy, deleteIcon, section02 } from '../../../icons';\nimport { ServiceFormSection } from '../types';\nimport { ColumnItem } from './ColumnItem';\n\ninterface SectionItemProps extends ServiceFormSection {\n  index: number;\n  onCopy?: () => void;\n  onRemove?: () => void;\n  onCopyColumn?: (column_index: number) => void;\n  onRemoveColumn?: (column_index: number) => void;\n}\n\nexport const SectionItem: FC<SectionItemProps> = ({\n  column,\n  index,\n  onCopy,\n  onRemove,\n  onCopyColumn,\n  onRemoveColumn,\n}) => {\n  return (\n    <div className=\"select-none\">\n      <div className=\"flex justify-between items-center pt-5\">\n        <div className=\"flex items-center space-x-2.5 flex-1\">\n          <div className=\"w-6 h-6 bg-gray100 rounded p-1\">\n            <img src={section02} alt=\"섹션 아이콘\" className=\"w-4 h-4 block\" />\n          </div>\n          <p className=\"text-b2\">섹션 {index + 1}</p>\n        </div>\n        <div className=\"flex items-center space-x-2.5\">\n          <button type=\"button\" onClick={onCopy}>\n            <img src={copy} alt=\"복사\" className=\"w-6 h-6 block\" />\n          </button>\n          <button type=\"button\" onClick={onRemove}>\n            <img src={deleteIcon} alt=\"삭제\" className=\"w-6 h-6 block\" />\n          </button>\n        </div>\n      </div>\n      <Droppable droppableId={`section-${index}`}>\n        {(provided) => {\n          return (\n            <div\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n              className=\"pb-5\"\n            >\n              {column.map((item, _index) => (\n                <ColumnItem\n                  key={_index}\n                  index={_index}\n                  draggableId={`section-${index}-column-${_index}`}\n                  type={item.type}\n                  onCopy={() => onCopyColumn?.(_index)}\n                  onRemove={() => onRemoveColumn?.(_index)}\n                />\n              ))}\n              {provided.placeholder}\n            </div>\n          );\n        }}\n      </Droppable>\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { FormColumnType, ServiceFormSection } from \"../types\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { SectionItem } from \"./SectionItem\";\nimport { GrayPlus, section } from \"../../../icons\";\n\ninterface ServiceFormContentManagerProps {\n  sections: ServiceFormSection[];\n  changeSections: (next: ServiceFormSection[]) => void;\n}\n\nfunction removeItem<T>(arr: T[], index: number): [T[], T] {\n  const [removed] = arr.splice(index, 1);\n  return [arr, removed];\n}\nfunction insertItem<T>(arr: T[], index: number, item: T) {\n  arr.splice(index, 0, item);\n  return arr;\n}\n\nfunction parseDroppableIdToIndex(id: string) {\n  if (id.startsWith(\"section-\") === false) {\n    throw new Error(\"잘못된 정보\");\n  }\n  const _id = id.replace(\"section-\", \"\");\n  const parsed_id = parseInt(_id);\n  return parsed_id;\n}\n\nfunction moveItemEqualSection(\n  section: ServiceFormSection,\n  fromIndex: number,\n  destIndex: number\n) {\n  const arr = Array.from(section.column);\n  const [_arr, moveItem] = removeItem(arr, fromIndex);\n  return insertItem(_arr, destIndex, moveItem);\n}\n\nexport const ServiceFormContentManager: FC<ServiceFormContentManagerProps> = ({\n  sections,\n  changeSections,\n}) => {\n  function copySection(index: number) {\n    const _sections = Array.from(sections);\n    const source = _sections[index];\n    _sections.splice(index, 0, source);\n    changeSections(_sections);\n  }\n\n  function addSection() {\n    const _sections = Array.from(sections);\n    _sections.push({ column: [], description: \"\", label: \"\" });\n    changeSections(_sections);\n  }\n\n  function addColumn() {\n    const _section = Array.from(sections);\n    if (_section.length > 0) {\n      _section[_section.length - 1].column.push({\n        type: FormColumnType.TEXT,\n        label: \"\",\n        description: \"\",\n        image: null,\n        required: false,\n        table: [],\n      });\n      changeSections(_section);\n    }\n  }\n\n  function removeSection(index: number) {\n    const _sections = Array.from(sections);\n    _sections.splice(index, 1);\n    changeSections(_sections);\n  }\n\n  function copyColumn(section: number, column: number) {\n    const _sections = Array.from(sections);\n    const source = _sections[section].column[column];\n    _sections[section].column.splice(column, 0, source);\n    changeSections(_sections);\n  }\n\n  function removeColumn(section: number, column: number) {\n    const _sections = Array.from(sections);\n    _sections[section].column.splice(column, 1);\n    changeSections(_sections);\n  }\n\n  return (\n    <div className=\"\">\n      <div className=\"border-b-2 border-gray100 py-5 flex justify-between items-end\">\n        <p className=\"text-b1 font-bold\">Contents</p>\n        <div className=\"flex space-x-2.5\">\n          <button\n            className=\"w-10 h-10 bg-gray100 rounded p-1.5\"\n            type=\"button\"\n            onClick={addSection}\n          >\n            <img src={section} alt=\"섹션 추가 \" className=\"w-7 h-7\" />\n          </button>\n          <button\n            className=\"w-10 h-10 bg-gray100 rounded p-1.5\"\n            type=\"button\"\n            onClick={addColumn}\n          >\n            <img src={GrayPlus} alt=\"컬럼 추가 \" className=\"w-7 h-7\" />\n          </button>\n        </div>\n      </div>\n      <DragDropContext\n        onDragEnd={(result, provided) => {\n          const { destination, source } = result;\n          if (!destination) {\n            return;\n          }\n          if (\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n          ) {\n            return;\n          }\n          // 같은 섹션 안에서 이동이 이루어진 경우\n          if (destination.droppableId === source.droppableId) {\n            const section_index = parseDroppableIdToIndex(\n              destination.droppableId\n            );\n            const _sections = Array.from(sections);\n            const _columns = moveItemEqualSection(\n              _sections[section_index],\n              source.index,\n              destination.index\n            );\n            _sections[section_index].column = _columns;\n\n            return changeSections(_sections);\n          }\n          // 다른 섹션 안에서 이동이 이루어진 경우\n          const sourceSectionIndex = parseDroppableIdToIndex(\n            source.droppableId\n          );\n          const destSectionIndex = parseDroppableIdToIndex(\n            destination.droppableId\n          );\n          // 기존 위치에서 제거\n          const next_sections = Array.from(sections);\n          const source_column = Array.from(\n            next_sections[sourceSectionIndex].column\n          );\n          const [removed_source_columns, moveItem] = removeItem(\n            source_column,\n            source.index\n          );\n          next_sections[sourceSectionIndex].column = removed_source_columns;\n\n          const dest_column = Array.from(\n            next_sections[destSectionIndex].column\n          );\n          const inserted_dest_column = insertItem(\n            dest_column,\n            destination.index,\n            moveItem\n          );\n          next_sections[destSectionIndex].column = inserted_dest_column;\n\n          // 상태 변경\n          changeSections(next_sections);\n        }}\n      >\n        <div className=\"divide-y divide-gray100\">\n          {sections.length === 0 && (\n            <div className=\"py-10\">\n              <p className=\"font-medium text-b2\">섹션을 추가해주세요.</p>\n            </div>\n          )}\n          {sections.map((item, index) => {\n            return (\n              <SectionItem\n                {...item}\n                index={index}\n                key={index}\n                onCopy={() => copySection(index)}\n                onRemove={() => removeSection(index)}\n                onCopyColumn={(coulumn_index) => {\n                  copyColumn(index, coulumn_index);\n                }}\n                onRemoveColumn={(coulumn_index) => {\n                  removeColumn(index, coulumn_index);\n                }}\n              />\n            );\n          })}\n        </div>\n      </DragDropContext>\n    </div>\n  );\n};\n","import { createContext } from 'react';\nimport { ServiceFormDispatchType, ServiceFormType } from './types';\n\nexport const FormValueContext = createContext<ServiceFormType | undefined>(\n  undefined\n);\n\nexport const FormDispatchContext = createContext<\n  ServiceFormDispatchType | undefined\n>(undefined);\n","import { useContext } from 'react';\nimport { FormDispatchContext } from '../form-context';\n\nexport function useFormDispatchContext() {\n  const context = useContext(FormDispatchContext);\n  if (context === undefined) {\n    throw new Error('초기화 후 사용해 주세요.');\n  }\n  return context;\n}\n","import { FC, useLayoutEffect } from 'react';\nimport { DropDown } from '../../DropDown';\nimport { InputToggle } from '../../InputToggle';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormCheckboxColumn } from '../types';\n\ninterface CheckboxSettingEditorProps extends ServiceFormCheckboxColumn {\n  column: number;\n  section: number;\n}\n\nexport const CheckboxSettingEditor: FC<CheckboxSettingEditorProps> = ({\n  column,\n  section,\n  required,\n  etc_field,\n  items,\n  max_checkbox_count,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n  const handleChangeEtcField = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        etc_field: next,\n      },\n    });\n  };\n  const dropdownData = items.map((v, i) => {\n    return { label: (i + 1).toString(), value: i + 1 };\n  });\n\n  const handleMaxCheckboxCount = (next: number) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        max_checkbox_count: next,\n      },\n    });\n  };\n\n  useLayoutEffect(() => {\n    if (max_checkbox_count > items.length) {\n      dispatch.updateItem({\n        section,\n        column,\n        data: {\n          max_checkbox_count: items.length,\n        },\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [items.length]);\n\n  return (\n    <div className=\"space-y-5\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">기타옵션</p>\n        <InputToggle value={etc_field} onChange={handleChangeEtcField} />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">선택가능 갯수</p>\n        <DropDown\n          data={dropdownData}\n          value={max_checkbox_count}\n          onChange={handleMaxCheckboxCount}\n          className=\"w-[120px]\"\n        />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { InputToggle } from '../../InputToggle';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormDropDownColumn } from '../types';\n\ninterface DropdownSettingEditorProps extends ServiceFormDropDownColumn {\n  section: number;\n  column: number;\n}\n\nexport const DropdownSettingEditor: FC<DropdownSettingEditorProps> = ({\n  column,\n  section,\n  required,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { CheckBox } from '../../CheckBox';\nimport { DropDown } from '../../DropDown';\nimport { InputToggle } from '../../InputToggle';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormFileUploadColumn } from '../types';\n\ninterface FileSettingEditorProps extends ServiceFormFileUploadColumn {\n  section: number;\n  column: number;\n}\n\nexport const FileSettingEditor: FC<FileSettingEditorProps> = ({\n  column,\n  section,\n  required,\n  allow_mime,\n  limit_file_number,\n  limit_file_size,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n  const allowBoolean: boolean = allow_mime === null ? false : true;\n  const dicomAllowed =\n    allow_mime === null ? false : allow_mime.includes('dicom');\n\n  const imgAllowed = allow_mime === null ? false : allow_mime.includes('img');\n\n  const miiAllowed = allow_mime === null ? false : allow_mime.includes('mii');\n\n  const gifAllowed = allow_mime === null ? false : allow_mime.includes('gif');\n\n  const handleAllowMimeCheckbox = (field: string) => (next: boolean) => {\n    if (allow_mime === null) {\n      return;\n    }\n    if (next === true) {\n      const _next = Array.from(allow_mime);\n      _next.push(field);\n      dispatch.updateItem({\n        section,\n        column,\n        data: {\n          allow_mime: _next,\n        },\n      });\n    } else {\n      const _next = allow_mime.filter((v) => v !== field);\n      dispatch.updateItem({\n        section,\n        column,\n        data: {\n          allow_mime: _next,\n        },\n      });\n    }\n  };\n\n  const handleAllowMimeChange = (next: boolean) => {\n    if (next === true) {\n      dispatch.updateItem({\n        section,\n        column,\n        data: {\n          allow_mime: [],\n        },\n      });\n    } else {\n      dispatch.updateItem({\n        section,\n        column,\n        data: {\n          allow_mime: null,\n        },\n      });\n    }\n  };\n\n  const handleChangeFileNumber = (next: number) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        limit_file_number: next,\n      },\n    });\n  };\n  const handleChangeFileSize = (next: number) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        limit_file_size: next,\n      },\n    });\n  };\n\n  return (\n    <div className=\"space-y-5\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">특정파일만 허용</p>\n        <InputToggle value={allowBoolean} onChange={handleAllowMimeChange} />\n      </div>\n      <div className=\"grid grid-cols-2 gap-2.5\">\n        <div className=\"flex items-center space-x-2.5\">\n          <CheckBox\n            value={dicomAllowed}\n            onChange={handleAllowMimeCheckbox('dicom')}\n            disabled={allowBoolean === false}\n          />\n          <p className=\"t4ext-gray800 text-b3\">dicom</p>\n        </div>\n        <div className=\"flex items-center space-x-2.5\">\n          <CheckBox\n            value={imgAllowed}\n            onChange={handleAllowMimeCheckbox('img')}\n            disabled={allowBoolean === false}\n          />\n          <p className=\"t4ext-gray800 text-b3\">img · hdr</p>\n        </div>\n        <div className=\"flex items-center space-x-2.5\">\n          <CheckBox\n            value={miiAllowed}\n            onChange={handleAllowMimeCheckbox('mii')}\n            disabled={allowBoolean === false}\n          />\n          <p className=\"t4ext-gray800 text-b3\">mii</p>\n        </div>\n        <div className=\"flex items-center space-x-2.5\">\n          <CheckBox\n            value={gifAllowed}\n            onChange={handleAllowMimeCheckbox('gif')}\n            disabled={allowBoolean === false}\n          />\n          <p className=\"t4ext-gray800 text-b3\">gif</p>\n        </div>\n      </div>\n      <div className=\"flex justify-between items-center\">\n        <p className=\"text-gray800 text-b3\">최대 파일 수</p>\n        <DropDown\n          data={[\n            { label: '1', value: 1 },\n            { label: '2', value: 2 },\n            { label: '3', value: 3 },\n            { label: '4', value: 4 },\n            { label: '5', value: 5 },\n          ]}\n          value={limit_file_number}\n          className=\"w-[120px]\"\n          onChange={handleChangeFileNumber}\n        />\n      </div>\n      <div className=\"flex justify-between items-center\">\n        <p className=\"text-gray800 text-b3\">최대 파일 크기</p>\n        <DropDown\n          data={[\n            { label: '1MB', value: 1 },\n            { label: '10MB', value: 10 },\n            { label: '100MB', value: 100 },\n            { label: '1GB', value: 1024 },\n            { label: '5GB', value: 5120 },\n          ]}\n          value={limit_file_size}\n          className=\"w-[120px]\"\n          onChange={handleChangeFileSize}\n        />\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NumericFormat } from 'react-number-format';\n\ninterface NumberInputBoxProps {\n  className?: string;\n  placeholder?: string;\n  value: number;\n  onChange?: (next: number) => void;\n}\n\nexport const NumberInputBox: FC<NumberInputBoxProps> = ({\n  className,\n  placeholder,\n  value,\n  onChange,\n}) => {\n  return (\n    <NumericFormat\n      placeholder={placeholder}\n      className={classNames(\n        'text-b3 border border-gray300 rounded py-3 px-[15px] focus:border-blue500 placeholder:text-gray400 disabled:bg-gray100',\n        className\n      )}\n      value={value}\n      onValueChange={(e) => {\n        onChange?.(typeof e.floatValue === 'undefined' ? 0 : e.floatValue);\n      }}\n    />\n  );\n};\n","import { FC } from 'react';\nimport { InputBox } from '../../InputBox';\nimport { InputToggle } from '../../InputToggle';\nimport { NumberInputBox } from '../../NumberInputBox';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormLinearColumn } from '../types';\n\ninterface LinearSettingEditorProps extends ServiceFormLinearColumn {\n  section: number;\n  column: number;\n}\n\nexport const LinearSettingEditor: FC<LinearSettingEditorProps> = ({\n  column,\n  section,\n  max_linear,\n  min_linear,\n  max_linear_label,\n  min_linear_label,\n  required,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n\n  const handleMinSlide = (next: number) => {\n    let next_min = next;\n    let next_max = max_linear;\n    if (next_min >= next_max) {\n      next_max = next_min + 1;\n    }\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        min_linear: next_min,\n        max_linear: next_max,\n      },\n    });\n  };\n  const handleMaxSlide = (next: number) => {\n    let next_min = min_linear;\n    let next_max = next;\n    if (next_min >= next_max) {\n      next_min = next_max - 1;\n    }\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        min_linear: next_min,\n        max_linear: next_max,\n      },\n    });\n  };\n\n  const handleMinLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        min_linear_label: next,\n      },\n    });\n  };\n  const handleMaxLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        max_linear_label: next,\n      },\n    });\n  };\n\n  return (\n    <div className=\"space-y-5\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">최소값</p>\n        <NumberInputBox\n          className=\"w-[120px]\"\n          placeholder=\"(필수) 최소값\"\n          value={min_linear}\n          onChange={handleMinSlide}\n        />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">최대값</p>\n        <NumberInputBox\n          className=\"w-[120px]\"\n          placeholder=\"(필수) 최대값\"\n          value={max_linear}\n          onChange={handleMaxSlide}\n        />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">최소값 라벨</p>\n        <InputBox\n          className=\"w-[120px]\"\n          placeholder=\"입력하세요.\"\n          value={min_linear_label}\n          onChange={(e) => handleMinLabel(e.target.value)}\n        />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">최대값 라벨</p>\n        <InputBox\n          className=\"w-[120px]\"\n          placeholder=\"입력하세요.\"\n          value={max_linear_label}\n          onChange={(e) => handleMaxLabel(e.target.value)}\n        />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { InputToggle } from '../../InputToggle';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormNumberColumn } from '../types';\n\ninterface NumberSettingEditorProps extends ServiceFormNumberColumn {\n  section: number;\n  column: number;\n}\n\nexport const NumberSettingEditor: FC<NumberSettingEditorProps> = ({\n  column,\n  section,\n  required,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { InputToggle } from '../../InputToggle';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormRadioColumn } from '../types';\n\ninterface RadioSettingEditorProps extends ServiceFormRadioColumn {\n  section: number;\n  column: number;\n}\n\nexport const RadioSettingEditor: FC<RadioSettingEditorProps> = ({\n  column,\n  section,\n  required,\n  etc_field,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n  const handleChangeEtcField = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        etc_field: next,\n      },\n    });\n  };\n  return (\n    <div className=\"space-y-5\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">기타옵션</p>\n        <InputToggle value={etc_field} onChange={handleChangeEtcField} />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { InputToggle } from '../../InputToggle';\nimport { NumberInputBox } from '../../NumberInputBox';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormSliderColumn } from '../types';\n\ninterface SlideSettingEditorProps extends ServiceFormSliderColumn {\n  section: number;\n  column: number;\n}\n\nexport const SlideSettingEditor: FC<SlideSettingEditorProps> = ({\n  column,\n  section,\n  required,\n  fixed_slide,\n  min_slide,\n  max_slide,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n  const handleChangeFixedInit = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        fixed_slide: next,\n      },\n    });\n  };\n  const handleMinSlide = (next: number) => {\n    let next_min = next;\n    let next_max = max_slide;\n    if (next_min >= next_max) {\n      next_max = next_min + 1;\n    }\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        min_slide: next_min,\n        max_slide: next_max,\n      },\n    });\n  };\n  const handleMaxSlide = (next: number) => {\n    let next_min = min_slide;\n    let next_max = next;\n    if (next_min >= next_max) {\n      next_min = next_max - 1;\n    }\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        min_slide: next_min,\n        max_slide: next_max,\n      },\n    });\n  };\n\n  return (\n    <div className=\"space-y-5\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">시작점 고정</p>\n        <InputToggle value={fixed_slide} onChange={handleChangeFixedInit} />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">최소값</p>\n        <NumberInputBox\n          className=\"w-[120px]\"\n          placeholder=\"(필수) 최소값\"\n          value={min_slide}\n          onChange={handleMinSlide}\n        />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">최대값</p>\n        <NumberInputBox\n          className=\"w-[120px]\"\n          placeholder=\"(필수) 최대값\"\n          value={max_slide}\n          onChange={handleMaxSlide}\n        />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { InputToggle } from '../../InputToggle';\nimport { NumberInputBox } from '../../NumberInputBox';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormSpinnerColumn } from '../types';\n\ninterface SpinerSettingEditorProps extends ServiceFormSpinnerColumn {\n  column: number;\n  section: number;\n}\n\nexport const SpinerSettingEditor: FC<SpinerSettingEditorProps> = ({\n  column,\n  section,\n  required,\n  spinner_init,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n\n  const handleSpinerInit = (next: number) => {\n    let next_min = spinner_init;\n    let next_max = next;\n    if (next_min >= next_max) {\n      next_min = next_max - 1;\n    }\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        spinner_init: next,\n      },\n    });\n  };\n  return (\n    <div className=\"space-y-5\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">시작값</p>\n        <NumberInputBox\n          className=\"w-[120px]\"\n          placeholder=\"(필수) 시작값\"\n          value={spinner_init}\n          onChange={handleSpinerInit}\n        />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { InputToggle } from '../../InputToggle';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ServiceFormTextColumn } from '../types';\n\ninterface TextSettingEditorProps extends ServiceFormTextColumn {\n  section: number;\n  column: number;\n}\n\nexport const TextSettingEditor: FC<TextSettingEditorProps> = ({\n  required,\n  column,\n  section,\n}) => {\n  const dispatch = useFormDispatchContext();\n  const handleChange = (next: boolean) => {\n    dispatch.updateItem({\n      section,\n      column,\n      data: {\n        required: next,\n      },\n    });\n  };\n  return (\n    <div>\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-gray800 text-b3\">필수</p>\n        <InputToggle value={required} onChange={handleChange} />\n      </div>\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport { FormValueContext } from '../form-context';\n\nexport function useFormValueContext() {\n  const context = useContext(FormValueContext);\n  if (context === undefined) {\n    throw new Error('초기화 후 사용해 주세요.');\n  }\n  return context;\n}\n","import { FC, useMemo } from 'react';\nimport { CheckboxSettingEditor } from './components/CheckboxSettingEditor';\nimport { DropdownSettingEditor } from './components/DropdownSettingEditor';\nimport { FileSettingEditor } from './components/FileSettingEditor';\nimport { LinearSettingEditor } from './components/LinearSettingEditor';\nimport { NumberSettingEditor } from './components/NumberSettingEditor';\nimport { RadioSettingEditor } from './components/RadioSettingEditor';\nimport { SlideSettingEditor } from './components/SlideSettingEditor';\nimport { SpinerSettingEditor } from './components/SpinerSettingEditor';\nimport { TextSettingEditor } from './components/TextSettingEditor';\nimport { useFormDispatchContext } from './hooks/useFormDispatchContext';\nimport { useFormValueContext } from './hooks/useFormValueContext';\nimport { FormColumnType, ServiceFormColumn } from './types';\n\ninterface EditorAreaSettingProps {\n  column: number;\n  section: number;\n}\n\nexport const EditorAreaSetting: FC<EditorAreaSettingProps> = ({\n  column,\n  section,\n}) => {\n  const value = useFormValueContext();\n  const dispatch = useFormDispatchContext();\n\n  const item = useMemo(() => {\n    return dispatch.getItem(section, column) as ServiceFormColumn | null;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value.data, section, column]);\n\n  if (item === null) {\n    return null;\n  }\n\n  return (\n    <div>\n      {item.type === FormColumnType.TEXT && (\n        <TextSettingEditor {...item} column={column} section={section} />\n      )}\n      {item.type === FormColumnType.NUMBER && (\n        <NumberSettingEditor {...item} column={column} section={section} />\n      )}\n      {item.type === FormColumnType.FILE && (\n        <FileSettingEditor {...item} column={column} section={section} />\n      )}\n      {item.type === FormColumnType.DROPROWN && (\n        <DropdownSettingEditor {...item} column={column} section={section} />\n      )}\n      {item.type === FormColumnType.RADIO && (\n        <RadioSettingEditor {...item} column={column} section={section} />\n      )}\n      {item.type === FormColumnType.CHECKBOX && (\n        <CheckboxSettingEditor {...item} column={column} section={section} />\n      )}\n      {item.type === FormColumnType.SLIDE && (\n        <SlideSettingEditor {...item} column={column} section={section} />\n      )}\n      {item.type === FormColumnType.SPINNER && (\n        <SpinerSettingEditor {...item} column={column} section={section} />\n      )}\n      {item.type === FormColumnType.LINEAR && (\n        <LinearSettingEditor {...item} column={column} section={section} />\n      )}\n    </div>\n  );\n};\n","import { Listbox } from \"@headlessui/react\";\nimport classNames from \"classnames\";\nimport { FC, useMemo } from \"react\";\nimport { grayDownTriangle, section02 } from \"../../icons\";\nimport { EditorAreaSetting } from \"./EditorAreaSetting\";\nimport { useFormDispatchContext } from \"./hooks/useFormDispatchContext\";\nimport { useFormValueContext } from \"./hooks/useFormValueContext\";\nimport { ColumnTypeToIconMap } from \"./icons\";\nimport { FormColumnType, ServiceFormColumn, ServiceFormSection } from \"./types\";\n\ninterface EditorAreaProps {}\n\nconst TYPE = [\n  FormColumnType.TITLE,\n  FormColumnType.NUMBER,\n  FormColumnType.TEXT,\n  FormColumnType.FILE,\n  FormColumnType.DROPROWN,\n  FormColumnType.RADIO,\n  FormColumnType.CHECKBOX,\n  FormColumnType.SLIDE,\n  FormColumnType.SPINNER,\n  FormColumnType.LINEAR,\n];\n\nconst TypeToStrMap: Record<FormColumnType, string> = {\n  [FormColumnType.TITLE]: \"제목 및 설명\",\n  [FormColumnType.TEXT]: \"텍스트필드\",\n  [FormColumnType.NUMBER]: \"숫자필드\",\n  [FormColumnType.FILE]: \"파일업로드\",\n  [FormColumnType.DROPROWN]: \"드롭다운\",\n  [FormColumnType.RADIO]: \"라디오 버튼\",\n  [FormColumnType.CHECKBOX]: \"체크박스\",\n  [FormColumnType.SLIDE]: \"슬라이드\",\n  [FormColumnType.SPINNER]: \"스피너\",\n  [FormColumnType.LINEAR]: \"선형배율\",\n};\nconst TypeToInitDataMap: Record<FormColumnType, any> = {\n  [FormColumnType.TITLE]: {\n    type: FormColumnType.TITLE,\n    description: \"\",\n    label: \"\",\n    image: null,\n  },\n  [FormColumnType.TEXT]: {\n    type: FormColumnType.TEXT,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n  },\n  [FormColumnType.NUMBER]: {\n    type: FormColumnType.NUMBER,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n  },\n  [FormColumnType.FILE]: {\n    type: FormColumnType.FILE,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n    allow_mime: [],\n    limit_file_number: 1,\n    limit_file_size: 1,\n  },\n  [FormColumnType.DROPROWN]: {\n    type: FormColumnType.DROPROWN,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n    items: [\"\", \"\"],\n  },\n  [FormColumnType.RADIO]: {\n    type: FormColumnType.RADIO,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n    etc_field: false,\n    items: [\"\", \"\"],\n  },\n  [FormColumnType.CHECKBOX]: {\n    type: FormColumnType.CHECKBOX,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n    etc_field: false,\n    items: [\"\", \"\"],\n    max_checkbox_count: 1,\n  },\n  [FormColumnType.SLIDE]: {\n    type: FormColumnType.SLIDE,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n    min_slide: 0,\n    max_slide: 100,\n    fixed_slide: true,\n  },\n  [FormColumnType.SPINNER]: {\n    type: FormColumnType.SPINNER,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n    spinner_init: 0,\n  },\n  [FormColumnType.LINEAR]: {\n    type: FormColumnType.LINEAR,\n    description: \"\",\n    label: \"\",\n    image: null,\n    table: null,\n    required: false,\n    max_linear: 10,\n    min_linear: 0,\n    max_linear_label: \"10\",\n    min_linear_label: \"0\",\n  },\n};\n\nexport const EditorArea: FC<EditorAreaProps> = () => {\n  const { select_item } = useFormValueContext();\n  const dispatch = useFormDispatchContext();\n\n  const item = useMemo(() => {\n    if (select_item === null) {\n      return null;\n    }\n    // @ts-ignore\n    return dispatch.getItem(select_item.section, select_item.column);\n  }, [dispatch, select_item]);\n\n  const handleChangeType = (next: FormColumnType) => {\n    if (select_item && select_item.column) {\n      dispatch.updateItem({\n        section: select_item.section,\n        column: select_item.column,\n        data: TypeToInitDataMap[next],\n        replace: true,\n      });\n    }\n  };\n\n  if (item === null) {\n    return (\n      <div className=\"py-5 px-10 w-[390px] border-l border-gray200 relative\">\n        <p className=\"font-medium text-b2\">수정할 항목을 선택해 주세요.</p>\n      </div>\n    );\n  }\n\n  if (Object.hasOwn(item, \"column\") && (item as ServiceFormSection).column) {\n    return (\n      <div className=\"w-[390px] border-l border-gray200 relative bg-white max-lg:w-full\">\n        <div className=\"px-10 py-5\">\n          <h2 className=\"font-semibold text-b1 mb-2.5\">타입</h2>\n          <div className=\"border border-gray300 px-[15px] py-3 rounded flex justify-between items-center\">\n            <div className=\"flex space-x-[5px] items-center\">\n              <div className=\"bg-gray100 rounded p-1\">\n                <img src={section02} className=\"w-4 h-4\" alt=\"\" />\n              </div>\n              <p className=\"text-b3\">섹션</p>\n            </div>\n            <img src={grayDownTriangle} className=\"w-4 h-4\" alt=\"\" />\n          </div>\n        </div>\n        <div className=\"h-1 bg-gray100\"></div>\n      </div>\n    );\n  }\n\n  const _item: ServiceFormColumn = item as ServiceFormColumn;\n\n  return (\n    <div className=\"w-[390px] border-l border-gray200 relative bg-white max-md:w-full max-md:h-full max-xl:overflow-auto\">\n      <div className=\"px-10 py-5\">\n        <h2 className=\"font-semibold text-b1 mb-2.5\">타입</h2>\n        <Listbox value={_item.type} onChange={handleChangeType}>\n          <div className=\"relative\">\n            <Listbox.Button\n              className={({ open }) =>\n                classNames(\n                  \"border border-gray300 px-[15px] py-3 rounded flex justify-between items-center w-full\",\n                  { \"rounded-b-none\": open }\n                )\n              }\n            >\n              <div className=\"flex space-x-[5px] items-center\">\n                <div className=\"bg-gray100 rounded p-1\">\n                  <img\n                    src={ColumnTypeToIconMap[_item.type]}\n                    className=\"w-4 h-4\"\n                    alt=\"아이콘\"\n                  />\n                </div>\n                <p className=\"text-b3\">{TypeToStrMap[_item.type]}</p>\n              </div>\n              <img src={grayDownTriangle} className=\"w-4 h-4\" alt=\"\" />\n            </Listbox.Button>\n            <div>\n              <Listbox.Options\n                className=\"absolute border border-t-0 border-gray300 rounded-b left-0 right-0 overflow-auto max-md:overflow-visible z-10\"\n                style={{ maxHeight: 320 }}\n              >\n                {TYPE.map((item, itemIndex) => {\n                  return (\n                    <Listbox.Option\n                      value={item}\n                      key={itemIndex}\n                      className={({ active }) =>\n                        classNames(\n                          \"hover:bg-gray50 px-[15px] py-3 cursor-pointer\",\n                          {\n                            \"bg-white\": active === false,\n                            \"bg-gray50\": active === true,\n                          }\n                        )\n                      }\n                    >\n                      {({ active }) => {\n                        return (\n                          <span\n                            className={classNames(\"text-b3\", {\n                              \"text-blue500\": active === true,\n                              \"text-gray600\": active === false,\n                            })}\n                          >\n                            {TypeToStrMap[item]}\n                          </span>\n                        );\n                      }}\n                    </Listbox.Option>\n                  );\n                })}\n              </Listbox.Options>\n            </div>\n          </div>\n        </Listbox>\n      </div>\n      <div className=\"h-1 bg-gray100\"></div>\n      <div className=\"px-10 py-5\">\n        <div className=\"border-b border-gray100 mb-5\">\n          <h2 className=\"font-semibold text-b1 mb-2.5\">설정</h2>\n        </div>\n        <div>\n          {select_item !== null && (\n            <EditorAreaSetting\n              column={select_item.column as number}\n              section={select_item.section}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Dialog, Transition } from '@headlessui/react';\nimport { FC, Fragment, useState, ChangeEventHandler, useId } from 'react';\nimport { AlertModal } from './AlertModal';\n\ninterface AddImageModalProps {\n  open?: boolean;\n  onClose?: () => void;\n  onSelect?: (file: File & { url: string }) => void;\n}\n\nconst FILE_ACCEPT = 'image/png,image/jpeg,image/jpg';\n\nexport const AddImageModal: FC<AddImageModalProps> = ({\n  onClose,\n  open,\n  onSelect,\n}) => {\n  const id = useId();\n  const [modal, setModal] = useState({ show: false, message: '' });\n  const showModal = (message: string) => {\n    setModal({\n      show: true,\n      message,\n    });\n  };\n  const hideModal = () => {\n    setModal((prev) => ({ ...prev, show: false }));\n  };\n  const handleClose = () => {\n    onClose?.();\n  };\n\n  const handleFiles = (files?: FileList) => {\n    if (files) {\n      return files.item(0);\n    }\n    return null;\n  };\n\n  const verifyMIME = (file: File) => {\n    return FILE_ACCEPT.split(',').includes(file.type);\n  };\n\n  const updateFile = (file: File) => {\n    const url = URL.createObjectURL(file);\n    const _file: File & { url: string } = Object.assign(file, { url });\n    // dispatch.updateColumn(section, column, { image: _file });\n    onSelect?.(_file);\n  };\n\n  const handleChangeInputBox: ChangeEventHandler<HTMLInputElement> = (e) => {\n    const files = e.target.files;\n    const file = handleFiles(files || undefined);\n    if (file === null) {\n      showModal('파일이 존재하지 않습니다.');\n      return;\n    }\n    const isVerifyMIME = verifyMIME(file);\n    if (isVerifyMIME === false) {\n      showModal('파일 형식이 올바르지 않습니다.');\n      return;\n    }\n    updateFile(file);\n    onClose?.();\n  };\n\n  return (\n    <>\n      <Transition appear show={open} as={Fragment}>\n        <Dialog as=\"div\" className=\"relative z-modal\" onClose={handleClose}>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n          </Transition.Child>\n          <div className=\"fixed inset-0 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 text-center\">\n              <Transition.Child\n                as={Fragment}\n                enter=\"ease-out duration-300\"\n                enterFrom=\"opacity-0 scale-95\"\n                enterTo=\"opacity-100 scale-100\"\n                leave=\"ease-in duration-200\"\n                leaveFrom=\"opacity-100 scale-100\"\n                leaveTo=\"opacity-0 scale-95\"\n              >\n                <Dialog.Panel className=\"w-full max-w-[408px] transform overflow-hidden rounded bg-white p-10 text-left align-middle shadow-1 transition-all\">\n                  <label className=\"btn block cursor-pointer mb-5\" htmlFor={id}>\n                    이미지 업로드\n                  </label>\n                  <input\n                    id={id}\n                    value=\"\"\n                    hidden\n                    type=\"file\"\n                    accept={FILE_ACCEPT}\n                    onChange={handleChangeInputBox}\n                  />\n                  <p className=\"text-center text-b3 text-gray800\">\n                    gif, png, jpg\n                  </p>\n                </Dialog.Panel>\n              </Transition.Child>\n            </div>\n          </div>\n        </Dialog>\n      </Transition>\n      <AlertModal\n        title=\"알림\"\n        message={modal.message}\n        open={modal.show}\n        onClose={hideModal}\n      />\n    </>\n  );\n};\n","import { Dialog, Transition } from '@headlessui/react';\nimport { FC, Fragment, useState } from 'react';\nimport { Button } from '../components/Button';\nimport { InputBox } from '../components/InputBox';\nimport { AlertModal } from './AlertModal';\n\ninterface AddTableModalProps {\n  open?: boolean;\n  onClose?: () => void;\n  onSelect?: (table: { rows: string[] }[]) => void;\n}\n\nexport const AddTableModal: FC<AddTableModalProps> = ({\n  onClose,\n  open,\n  onSelect,\n}) => {\n  const [row, setRow] = useState('');\n  const [column, setColumn] = useState('');\n  const [modal, setModal] = useState({ show: false, message: '' });\n  const showModal = (message: string) => {\n    setModal({\n      show: true,\n      message,\n    });\n  };\n  const hideModal = () => {\n    setModal((prev) => ({ ...prev, show: false }));\n  };\n  const handleClose = () => {\n    setRow('');\n    setColumn('');\n    onClose?.();\n  };\n\n  const handleValidate = (\n    row: string,\n    column: string\n  ): [boolean, { num_row: number; num_column: number } | null] => {\n    if (/[0-9]/gi.test(row) === false || /[0-9]/gi.test(column) === false) {\n      showModal('정수 값만 입력해 주세요.');\n      return [false, null];\n    }\n\n    if (row.length > 1 || column.length > 1) {\n      showModal('최대 6까지 입력 가능합니다.');\n      return [false, null];\n    }\n    const num_row = parseInt(row);\n    const num_column = parseInt(column);\n    if (num_row > 6 || num_column > 6) {\n      showModal('최대 6까지 입력 가능합니다.');\n    }\n\n    return [true, { num_row, num_column }];\n  };\n\n  const handleSubmit = () => {\n    const [va, data] = handleValidate(row, column);\n    if (va === false || data === null) {\n      return;\n    }\n    const table = Array(data.num_column)\n      .fill('')\n      .map(() => ({\n        rows: Array(data.num_row)\n          .fill('')\n          .map(() => ''),\n      }));\n\n    onSelect?.(table);\n    handleClose();\n  };\n\n  return (\n    <>\n      <Transition appear show={open} as={Fragment}>\n        <Dialog as=\"div\" className=\"relative z-modal\" onClose={handleClose}>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n          </Transition.Child>\n          <div className=\"fixed inset-0 overflow-y-auto\">\n            <div className=\"flex min-h-full items-center justify-center p-4 text-center\">\n              <Transition.Child\n                as={Fragment}\n                enter=\"ease-out duration-300\"\n                enterFrom=\"opacity-0 scale-95\"\n                enterTo=\"opacity-100 scale-100\"\n                leave=\"ease-in duration-200\"\n                leaveFrom=\"opacity-100 scale-100\"\n                leaveTo=\"opacity-0 scale-95\"\n              >\n                <Dialog.Panel className=\"w-full max-w-[408px] transform overflow-hidden rounded bg-white p-10 text-left align-middle shadow-1 transition-all\">\n                  <InputBox\n                    placeholder=\"(필수) 행 개수 \"\n                    className=\"w-full mb-2.5\"\n                    value={row}\n                    onChange={(e) => setRow(e.target.value)}\n                  />\n                  <InputBox\n                    placeholder=\"(필수) 열 개수 \"\n                    className=\"w-full mb-5\"\n                    value={column}\n                    onChange={(e) => setColumn(e.target.value)}\n                  />\n                  <Button\n                    className=\"w-full block\"\n                    type=\"button\"\n                    onClick={handleSubmit}\n                  >\n                    생성하기\n                  </Button>\n                </Dialog.Panel>\n              </Transition.Child>\n            </div>\n          </div>\n        </Dialog>\n      </Transition>\n      <AlertModal\n        title=\"알림\"\n        message={modal.message}\n        open={modal.show}\n        onClose={hideModal}\n      />\n    </>\n  );\n};\n","import { FC } from 'react';\nimport styled from 'styled-components';\n\ninterface TableProps {\n  data: { rows: string[] }[];\n  onChange?: (row_index: number, col_index: number, text: string) => void;\n}\n\nconst TableView = styled.table`\n  width: 100%;\n  tr:first-child > td {\n    background-color: #f2f2f7;\n  }\n  tr {\n    border-bottom: 1px solid #c7c7cc;\n  }\n  td {\n    padding: 12px;\n    border-right: 1px solid #c7c7cc;\n    :first-child {\n      background-color: #fbfbfd;\n    }\n  }\n  td:last-child {\n    border-right: none;\n  }\n`;\n\nexport const Table: FC<TableProps> = ({ data, onChange }) => {\n  return (\n    <TableView>\n      <tbody>\n        {data.map(({ rows }, row_index) => {\n          return (\n            <tr key={`row-${row_index}`}>\n              {rows.map((row, col_index) => {\n                return (\n                  <td key={`column-${col_index}`}>\n                    <input\n                      type=\"text\"\n                      className=\"text-b3 placeholder:text-gray400 w-full bg-transparent text-center\"\n                      placeholder=\"입력\"\n                      value={row}\n                      onChange={(e) =>\n                        onChange?.(row_index, col_index, e.target.value)\n                      }\n                    />\n                  </td>\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </TableView>\n  );\n};\n","import { Menu, Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { FC, useState, Fragment } from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport {\n  copy,\n  deleteIcon,\n  GrayPlus,\n  img,\n  imgBlue500,\n  more,\n  move,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { AddTableModal } from '../../../modals/AddTableModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormCheckboxColumn } from '../types';\nimport { Table } from './Table';\n\ninterface ColumnCheckboxEditorProps extends ServiceFormCheckboxColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnCheckboxEditor: FC<ColumnCheckboxEditorProps> = (props) => {\n  const {\n    description,\n    label,\n    type,\n    index,\n    section,\n    image,\n    table,\n    isSelected,\n    items,\n    etc_field,\n  } = props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n\n  const handleItemChange = (item_index: number, next: string) => {\n    const _items = Array.from(items);\n    _items[item_index] = next;\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n  const handleInsertItem = (_index: number) => {\n    const _items = Array.from(items);\n    _items.splice(_index + 1, 0, '');\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n  const handleRemoveItem = (_index: number) => {\n    const _items = Array.from(items);\n    _items.splice(_index, 1);\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"p-10\">\n        <div className=\"flex items-center space-x-2.5\">\n          <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n            <img\n              src={ColumnTypeToIconMap[type]}\n              alt=\"제목 아이콘\"\n              className=\"w-5 h-5\"\n            />\n            <span className=\"text-b3 text-gray400 w-5 text-center\">\n              {index + 1}\n            </span>\n          </div>\n          <InputBox\n            className=\"flex-1\"\n            placeholder=\"(필수) 제목을 입력해 주세요.\"\n            value={label}\n            onChange={(e) => handleChangeLabel(e.target.value)}\n          />\n          <div className=\"flex items-center space-x-2.5 pl-2.5\">\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n              <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n            </button>\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n              <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n            </button>\n            <Menu as=\"div\" className=\"relative w-6 h-6\">\n              <div className=\"w-6 h-6\">\n                <Menu.Button className=\"w-6 h-6\">\n                  <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n                </Menu.Button>\n              </div>\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenImageModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? imgBlue500 : img}\n                            alt=\"이미지\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            이미지 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenTableModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? tableFieldBlue500 : tableFieldGray600}\n                            alt=\"테이블\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            표 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                </Menu.Items>\n              </Transition>\n            </Menu>\n          </div>\n        </div>\n        <InputLine\n          placeholder=\"(선택) 설명을 입력해 주세요.\"\n          className=\"mt-5 w-full\"\n          value={description}\n          onChange={(e) => handleChangeDescription(e.target.value)}\n        />\n        {image && (\n          <img\n            src={image.url}\n            alt=\"이미지\"\n            className=\"w-full object-cover mt-5\"\n          />\n        )}\n        {table && (\n          <div className=\"mt-5\">\n            <Table data={table} onChange={handleChangeTable} />\n          </div>\n        )}\n        <AddImageModal\n          open={openImageModal}\n          onClose={() => setOpenImageModal(false)}\n          onSelect={handelSelectImage}\n        />\n        <AddTableModal\n          open={openTableModal}\n          onClose={() => setOpenTableModal(false)}\n          onSelect={handleAddTable}\n        />\n      </div>\n      <div\n        className=\"h-1\"\n        style={{\n          background: 'linear-gradient(180deg, #F2F2F7 0%, #FFFFFF 100%)',\n        }}\n      ></div>\n      <div className=\"p-10\">\n        <DragDropContext\n          onDragEnd={({ destination, source }) => {\n            const dest_droppableId = destination?.droppableId;\n            const source_droppableId = source?.droppableId;\n            if (\n              !destination ||\n              !source ||\n              dest_droppableId !== source_droppableId\n            ) {\n              return;\n            }\n\n            const _items = Array.from(items);\n\n            const [movedItem] = _items.splice(source.index, 1);\n            _items.splice(destination.index, 0, movedItem);\n            dispatch.updateItem({\n              section,\n              column: index,\n              data: {\n                items: _items,\n              },\n            });\n          }}\n        >\n          <Droppable droppableId={`section-${section}-column-${index}`}>\n            {({ droppableProps, innerRef, placeholder }) => {\n              return (\n                <div ref={innerRef} {...droppableProps}>\n                  {items.map((item, _index) => {\n                    return (\n                      <div key={_index}>\n                        <Draggable\n                          draggableId={`section-${section}-column-${index}-item-${_index}`}\n                          index={_index}\n                        >\n                          {({ draggableProps, innerRef, dragHandleProps }) => {\n                            return (\n                              <div\n                                ref={innerRef}\n                                {...draggableProps}\n                                className=\"pt-2.5\"\n                              >\n                                <div className=\"flex items-center\">\n                                  <div className=\"flex items-center mr-2.5\">\n                                    <div\n                                      {...dragHandleProps}\n                                      className=\"w-6 h-6\"\n                                    >\n                                      <img\n                                        src={move}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </div>\n                                    <p className=\"w-[18px] ml-[5px] text-gray600 text-b3\">\n                                      {_index + 1}\n                                    </p>\n                                  </div>\n                                  <InputBox\n                                    className=\"w-full\"\n                                    placeholder=\"(필수) 옵션을 입력해 주세요.\"\n                                    value={item}\n                                    onChange={(e) =>\n                                      handleItemChange(_index, e.target.value)\n                                    }\n                                  />\n                                  <div className=\"ml-5 flex items-center\">\n                                    <button\n                                      className=\"w-6 h-6 mr-2.5\"\n                                      type=\"button\"\n                                      onClick={() => handleInsertItem(_index)}\n                                    >\n                                      <img\n                                        src={GrayPlus}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </button>\n                                    <button\n                                      className=\"w-6 h-6\"\n                                      type=\"button\"\n                                      onClick={() => handleRemoveItem(_index)}\n                                    >\n                                      <img\n                                        src={deleteIcon}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </button>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          }}\n                        </Draggable>\n                      </div>\n                    );\n                  })}\n                  {placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n        </DragDropContext>\n        {etc_field && (\n          <div className=\"pt-2.5\">\n            <div className=\"flex items-center\">\n              <p className=\"w-[18px] ml-[5px] text-gray600 text-b3\">\n                {items.length + 1}\n              </p>\n              <p className=\"text-b3\">기타</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Menu, Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { FC, useState, Fragment } from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport {\n  copy,\n  deleteIcon,\n  GrayPlus,\n  img,\n  imgBlue500,\n  more,\n  move,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { AddTableModal } from '../../../modals/AddTableModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormDropDownColumn } from '../types';\nimport { Table } from './Table';\n\ninterface ColumnDropDownEditorProps extends ServiceFormDropDownColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnDropDownEditor: FC<ColumnDropDownEditorProps> = (props) => {\n  const {\n    description,\n    label,\n    type,\n    index,\n    section,\n    image,\n    table,\n    isSelected,\n    items,\n  } = props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n\n  const handleItemChange = (item_index: number, next: string) => {\n    const _items = Array.from(items);\n    _items[item_index] = next;\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n  const handleInsertItem = (_index: number) => {\n    const _items = Array.from(items);\n    _items.splice(_index + 1, 0, '');\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n  const handleRemoveItem = (_index: number) => {\n    const _items = Array.from(items);\n    _items.splice(_index, 1);\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"p-10\">\n        <div className=\"flex items-center space-x-2.5\">\n          <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n            <img\n              src={ColumnTypeToIconMap[type]}\n              alt=\"제목 아이콘\"\n              className=\"w-5 h-5\"\n            />\n            <span className=\"text-b3 text-gray400 w-5 text-center\">\n              {index + 1}\n            </span>\n          </div>\n          <InputBox\n            className=\"flex-1\"\n            placeholder=\"(필수) 제목을 입력해 주세요.\"\n            value={label}\n            onChange={(e) => handleChangeLabel(e.target.value)}\n          />\n          <div className=\"flex items-center space-x-2.5 pl-2.5\">\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n              <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n            </button>\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n              <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n            </button>\n            <Menu as=\"div\" className=\"relative w-6 h-6\">\n              <div className=\"w-6 h-6\">\n                <Menu.Button className=\"w-6 h-6\">\n                  <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n                </Menu.Button>\n              </div>\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenImageModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? imgBlue500 : img}\n                            alt=\"이미지\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            이미지 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenTableModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? tableFieldBlue500 : tableFieldGray600}\n                            alt=\"테이블\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            표 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                </Menu.Items>\n              </Transition>\n            </Menu>\n          </div>\n        </div>\n        <InputLine\n          placeholder=\"(선택) 설명을 입력해 주세요.\"\n          className=\"mt-5 w-full\"\n          value={description}\n          onChange={(e) => handleChangeDescription(e.target.value)}\n        />\n        {image && (\n          <img\n            src={image.url}\n            alt=\"이미지\"\n            className=\"w-full object-cover mt-5\"\n          />\n        )}\n        {table && (\n          <div className=\"mt-5\">\n            <Table data={table} onChange={handleChangeTable} />\n          </div>\n        )}\n        <AddImageModal\n          open={openImageModal}\n          onClose={() => setOpenImageModal(false)}\n          onSelect={handelSelectImage}\n        />\n        <AddTableModal\n          open={openTableModal}\n          onClose={() => setOpenTableModal(false)}\n          onSelect={handleAddTable}\n        />\n      </div>\n      <div\n        className=\"h-1\"\n        style={{\n          background: 'linear-gradient(180deg, #F2F2F7 0%, #FFFFFF 100%)',\n        }}\n      ></div>\n      <div className=\"p-10\">\n        <DragDropContext\n          onDragEnd={({ destination, source }) => {\n            const dest_droppableId = destination?.droppableId;\n            const source_droppableId = source?.droppableId;\n            if (\n              !destination ||\n              !source ||\n              dest_droppableId !== source_droppableId\n            ) {\n              return;\n            }\n\n            const _items = Array.from(items);\n\n            const [movedItem] = _items.splice(source.index, 1);\n            _items.splice(destination.index, 0, movedItem);\n            dispatch.updateItem({\n              section,\n              column: index,\n              data: {\n                items: _items,\n              },\n            });\n          }}\n        >\n          <Droppable droppableId={`section-${section}-column-${index}`}>\n            {({ droppableProps, innerRef, placeholder }) => {\n              return (\n                <div ref={innerRef} {...droppableProps}>\n                  {items.map((item, _index) => {\n                    return (\n                      <div key={_index}>\n                        <Draggable\n                          draggableId={`section-${section}-column-${index}-item-${_index}`}\n                          index={_index}\n                        >\n                          {({ draggableProps, innerRef, dragHandleProps }) => {\n                            return (\n                              <div\n                                ref={innerRef}\n                                {...draggableProps}\n                                className=\"pt-2.5\"\n                              >\n                                <div className=\"flex items-center\">\n                                  <div className=\"flex items-center mr-2.5\">\n                                    <div\n                                      {...dragHandleProps}\n                                      className=\"w-6 h-6\"\n                                    >\n                                      <img\n                                        src={move}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </div>\n                                    <p className=\"w-[18px] ml-[5px] text-gray600 text-b3\">\n                                      {_index + 1}\n                                    </p>\n                                  </div>\n                                  <InputBox\n                                    className=\"w-full\"\n                                    placeholder=\"(필수) 옵션을 입력해 주세요.\"\n                                    value={item}\n                                    onChange={(e) =>\n                                      handleItemChange(_index, e.target.value)\n                                    }\n                                  />\n                                  <div className=\"ml-5 flex items-center\">\n                                    <button\n                                      className=\"w-6 h-6 mr-2.5\"\n                                      type=\"button\"\n                                      onClick={() => handleInsertItem(_index)}\n                                    >\n                                      <img\n                                        src={GrayPlus}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </button>\n                                    <button\n                                      className=\"w-6 h-6\"\n                                      type=\"button\"\n                                      onClick={() => handleRemoveItem(_index)}\n                                    >\n                                      <img\n                                        src={deleteIcon}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </button>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          }}\n                        </Draggable>\n                      </div>\n                    );\n                  })}\n                  {placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n","import { Menu, Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { FC, useState, Fragment } from 'react';\nimport {\n  copy,\n  deleteIcon,\n  img,\n  imgBlue500,\n  more,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { AddTableModal } from '../../../modals/AddTableModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormFileUploadColumn } from '../types';\nimport { Table } from './Table';\n\ninterface ColumnFileEditorProps extends ServiceFormFileUploadColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnFileEditor: FC<ColumnFileEditorProps> = (props) => {\n  const { description, label, type, index, section, image, table, isSelected } =\n    props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded p-10', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"flex items-center space-x-2.5\">\n        <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n          <img\n            src={ColumnTypeToIconMap[type]}\n            alt=\"제목 아이콘\"\n            className=\"w-5 h-5\"\n          />\n          <span className=\"text-b3 text-gray400 w-5 text-center\">\n            {index + 1}\n          </span>\n        </div>\n        <InputBox\n          className=\"flex-1\"\n          placeholder=\"(필수) 제목을 입력해 주세요.\"\n          value={label}\n          onChange={(e) => handleChangeLabel(e.target.value)}\n        />\n        <div className=\"flex items-center space-x-2.5 pl-2.5\">\n          <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n            <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n          </button>\n          <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n            <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n          </button>\n          <Menu as=\"div\" className=\"relative w-6 h-6\">\n            <div className=\"w-6 h-6\">\n              <Menu.Button className=\"w-6 h-6\">\n                <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n              </Menu.Button>\n            </div>\n            <Transition\n              as={Fragment}\n              enter=\"transition ease-out duration-100\"\n              enterFrom=\"transform opacity-0 scale-95\"\n              enterTo=\"transform opacity-100 scale-100\"\n              leave=\"transition ease-in duration-75\"\n              leaveFrom=\"transform opacity-100 scale-100\"\n              leaveTo=\"transform opacity-0 scale-95\"\n            >\n              <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      type=\"button\"\n                      className={classNames('block p-5 w-full text-left', {\n                        'bg-gray50 text-blue500': active,\n                      })}\n                      onClick={() => setOpenImageModal(true)}\n                    >\n                      <div className=\"flex items-center space-x-2.5\">\n                        <img\n                          src={active ? imgBlue500 : img}\n                          alt=\"이미지\"\n                          className=\"w-6 h-6\"\n                        />\n                        <span\n                          className={classNames('text-b3', {\n                            'text-blue500': active,\n                          })}\n                        >\n                          이미지 삽입\n                        </span>\n                      </div>\n                    </button>\n                  )}\n                </Menu.Item>\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      type=\"button\"\n                      className={classNames('block p-5 w-full text-left', {\n                        'bg-gray50 text-blue500': active,\n                      })}\n                      onClick={() => setOpenTableModal(true)}\n                    >\n                      <div className=\"flex items-center space-x-2.5\">\n                        <img\n                          src={active ? tableFieldBlue500 : tableFieldGray600}\n                          alt=\"테이블\"\n                          className=\"w-6 h-6\"\n                        />\n                        <span\n                          className={classNames('text-b3', {\n                            'text-blue500': active,\n                          })}\n                        >\n                          표 삽입\n                        </span>\n                      </div>\n                    </button>\n                  )}\n                </Menu.Item>\n              </Menu.Items>\n            </Transition>\n          </Menu>\n        </div>\n      </div>\n      <InputLine\n        placeholder=\"(선택) 설명을 입력해 주세요.\"\n        className=\"mt-5 w-full\"\n        value={description}\n        onChange={(e) => handleChangeDescription(e.target.value)}\n      />\n      {image && (\n        <img\n          src={image.url}\n          alt=\"이미지\"\n          className=\"w-full object-cover mt-5\"\n        />\n      )}\n      {table && (\n        <div className=\"mt-5\">\n          <Table data={table} onChange={handleChangeTable} />\n        </div>\n      )}\n      <AddImageModal\n        open={openImageModal}\n        onClose={() => setOpenImageModal(false)}\n        onSelect={handelSelectImage}\n      />\n      <AddTableModal\n        open={openTableModal}\n        onClose={() => setOpenTableModal(false)}\n        onSelect={handleAddTable}\n      />\n    </div>\n  );\n};\n","import { FC, useState, useEffect } from 'react';\nimport { LinearSlide } from '../../LinearSlide';\n\ninterface LinearPreviewProps {\n  min: number;\n  max: number;\n}\n\nexport const LinearPreview: FC<LinearPreviewProps> = ({ max, min }) => {\n  const [state, setState] = useState(min);\n\n  useEffect(() => {\n    if (state > max || state < min) {\n      setState(max);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [min, max]);\n\n  return (\n    <LinearSlide\n      maxValue={max}\n      minValue={min}\n      value={state}\n      onChange={setState}\n    />\n  );\n};\n","import { Menu, Transition } from \"@headlessui/react\";\nimport classNames from \"classnames\";\nimport { FC, useState, Fragment } from \"react\";\nimport {\n  copy,\n  deleteIcon,\n  img,\n  imgBlue500,\n  more,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from \"../../../icons\";\nimport { AddImageModal } from \"../../../modals/AddImageModal\";\nimport { AddTableModal } from \"../../../modals/AddTableModal\";\nimport { InputBox } from \"../../InputBox\";\nimport { InputLine } from \"../../InputLine\";\nimport { useFormDispatchContext } from \"../hooks/useFormDispatchContext\";\nimport { ColumnTypeToIconMap } from \"../icons\";\nimport { ServiceFormLinearColumn } from \"../types\";\nimport { LinearPreview } from \"./LinearPreview\";\nimport { Table } from \"./Table\";\n\ninterface ColumnLinearEditorProps extends ServiceFormLinearColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnLinearEditor: FC<ColumnLinearEditorProps> = (props) => {\n  const {\n    description,\n    label,\n    type,\n    index,\n    section,\n    image,\n    table,\n    isSelected,\n    max_linear,\n    max_linear_label,\n    min_linear,\n    min_linear_label,\n  } = props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n\n  const handleChangeMinValue = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        min_linear_label: next,\n      },\n    });\n  };\n\n  const handleChangeMaxValue = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        max_linear_label: next,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames(\"bg-white rounded\", {\n        \"border-blue500 border-2\": isSelected,\n        \"border border-gray100\": !isSelected,\n      })}\n    >\n      <div className=\"p-10\">\n        <div className=\"flex items-center space-x-2.5\">\n          <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n            <img\n              src={ColumnTypeToIconMap[type]}\n              alt=\"제목 아이콘\"\n              className=\"w-5 h-5\"\n            />\n            <span className=\"text-b3 text-gray400 w-5 text-center\">\n              {index + 1}\n            </span>\n          </div>\n          <InputBox\n            className=\"flex-1\"\n            placeholder=\"(필수) 제목을 입력해 주세요.\"\n            value={label}\n            onChange={(e) => handleChangeLabel(e.target.value)}\n          />\n          <div className=\"flex items-center space-x-2.5 pl-2.5\">\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n              <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n            </button>\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n              <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n            </button>\n            <Menu as=\"div\" className=\"relative w-6 h-6\">\n              <div className=\"w-6 h-6\">\n                <Menu.Button className=\"w-6 h-6\">\n                  <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n                </Menu.Button>\n              </div>\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames(\"block p-5 w-full text-left\", {\n                          \"bg-gray50 text-blue500\": active,\n                        })}\n                        onClick={() => setOpenImageModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? imgBlue500 : img}\n                            alt=\"이미지\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames(\"text-b3\", {\n                              \"text-blue500\": active,\n                            })}\n                          >\n                            이미지 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames(\"block p-5 w-full text-left\", {\n                          \"bg-gray50 text-blue500\": active,\n                        })}\n                        onClick={() => setOpenTableModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? tableFieldBlue500 : tableFieldGray600}\n                            alt=\"테이블\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames(\"text-b3\", {\n                              \"text-blue500\": active,\n                            })}\n                          >\n                            표 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                </Menu.Items>\n              </Transition>\n            </Menu>\n          </div>\n        </div>\n        <InputLine\n          placeholder=\"(선택) 설명을 입력해 주세요.\"\n          className=\"mt-5 w-full\"\n          value={description}\n          onChange={(e) => handleChangeDescription(e.target.value)}\n        />\n        {image && (\n          <img\n            src={image.url}\n            alt=\"이미지\"\n            className=\"w-full object-cover mt-5\"\n          />\n        )}\n        {table && (\n          <div className=\"mt-5\">\n            <Table data={table} onChange={handleChangeTable} />\n          </div>\n        )}\n        <AddImageModal\n          open={openImageModal}\n          onClose={() => setOpenImageModal(false)}\n          onSelect={handelSelectImage}\n        />\n        <AddTableModal\n          open={openTableModal}\n          onClose={() => setOpenTableModal(false)}\n          onSelect={handleAddTable}\n        />\n      </div>\n      <div\n        className=\"h-1\"\n        style={{\n          background: \"linear-gradient(180deg, #F2F2F7 0%, #FFFFFF 100%)\",\n        }}\n      ></div>\n      <div className=\"p-10\">\n        <div className=\"mx-3\">\n          <LinearPreview max={max_linear} min={min_linear} />\n        </div>\n        <div className=\"flex justify-between pt-2.5\">\n          <InputBox\n            value={min_linear_label}\n            style={{ maxWidth: 109 }}\n            className=\"w-full\"\n            placeholder=\"최소값 라벨\"\n            onChange={(e) => handleChangeMinValue(e.target.value)}\n          />\n          <InputBox\n            value={max_linear_label}\n            style={{ maxWidth: 109 }}\n            className=\"w-full\"\n            placeholder=\"최대값 라벨\"\n            onChange={(e) => handleChangeMaxValue(e.target.value)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Menu, Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { FC, useState, Fragment } from 'react';\nimport {\n  copy,\n  deleteIcon,\n  img,\n  imgBlue500,\n  more,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { AddTableModal } from '../../../modals/AddTableModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormNumberColumn } from '../types';\nimport { Table } from './Table';\n\ninterface ColumnNumberEditorProps extends ServiceFormNumberColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnNumberEditor: FC<ColumnNumberEditorProps> = (props) => {\n  const { description, label, type, index, section, image, table, isSelected } =\n    props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded p-10', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"flex items-center space-x-2.5\">\n        <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n          <img\n            src={ColumnTypeToIconMap[type]}\n            alt=\"제목 아이콘\"\n            className=\"w-5 h-5\"\n          />\n          <span className=\"text-b3 text-gray400 w-5 text-center\">\n            {index + 1}\n          </span>\n        </div>\n        <InputBox\n          className=\"flex-1\"\n          placeholder=\"(필수) 제목을 입력해 주세요.\"\n          value={label}\n          onChange={(e) => handleChangeLabel(e.target.value)}\n        />\n        <div className=\"flex items-center space-x-2.5 pl-2.5\">\n          <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n            <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n          </button>\n          <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n            <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n          </button>\n          <Menu as=\"div\" className=\"relative w-6 h-6\">\n            <div className=\"w-6 h-6\">\n              <Menu.Button className=\"w-6 h-6\">\n                <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n              </Menu.Button>\n            </div>\n            <Transition\n              as={Fragment}\n              enter=\"transition ease-out duration-100\"\n              enterFrom=\"transform opacity-0 scale-95\"\n              enterTo=\"transform opacity-100 scale-100\"\n              leave=\"transition ease-in duration-75\"\n              leaveFrom=\"transform opacity-100 scale-100\"\n              leaveTo=\"transform opacity-0 scale-95\"\n            >\n              <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      type=\"button\"\n                      className={classNames('block p-5 w-full text-left', {\n                        'bg-gray50 text-blue500': active,\n                      })}\n                      onClick={() => setOpenImageModal(true)}\n                    >\n                      <div className=\"flex items-center space-x-2.5\">\n                        <img\n                          src={active ? imgBlue500 : img}\n                          alt=\"이미지\"\n                          className=\"w-6 h-6\"\n                        />\n                        <span\n                          className={classNames('text-b3', {\n                            'text-blue500': active,\n                          })}\n                        >\n                          이미지 삽입\n                        </span>\n                      </div>\n                    </button>\n                  )}\n                </Menu.Item>\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      type=\"button\"\n                      className={classNames('block p-5 w-full text-left', {\n                        'bg-gray50 text-blue500': active,\n                      })}\n                      onClick={() => setOpenTableModal(true)}\n                    >\n                      <div className=\"flex items-center space-x-2.5\">\n                        <img\n                          src={active ? tableFieldBlue500 : tableFieldGray600}\n                          alt=\"테이블\"\n                          className=\"w-6 h-6\"\n                        />\n                        <span\n                          className={classNames('text-b3', {\n                            'text-blue500': active,\n                          })}\n                        >\n                          표 삽입\n                        </span>\n                      </div>\n                    </button>\n                  )}\n                </Menu.Item>\n              </Menu.Items>\n            </Transition>\n          </Menu>\n        </div>\n      </div>\n      <InputLine\n        placeholder=\"(선택) 설명을 입력해 주세요.\"\n        className=\"mt-5 w-full\"\n        value={description}\n        onChange={(e) => handleChangeDescription(e.target.value)}\n      />\n      {image && (\n        <img\n          src={image.url}\n          alt=\"이미지\"\n          className=\"w-full object-cover mt-5\"\n        />\n      )}\n      {table && (\n        <div className=\"mt-5\">\n          <Table data={table} onChange={handleChangeTable} />\n        </div>\n      )}\n      <AddImageModal\n        open={openImageModal}\n        onClose={() => setOpenImageModal(false)}\n        onSelect={handelSelectImage}\n      />\n      <AddTableModal\n        open={openTableModal}\n        onClose={() => setOpenTableModal(false)}\n        onSelect={handleAddTable}\n      />\n    </div>\n  );\n};\n","import { Menu, Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { FC, useState, Fragment } from 'react';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport {\n  copy,\n  deleteIcon,\n  GrayPlus,\n  img,\n  imgBlue500,\n  more,\n  move,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { AddTableModal } from '../../../modals/AddTableModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormRadioColumn } from '../types';\nimport { Table } from './Table';\n\ninterface ColumnRadioEditorProps extends ServiceFormRadioColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnRadioEditor: FC<ColumnRadioEditorProps> = (props) => {\n  const {\n    description,\n    label,\n    type,\n    index,\n    section,\n    image,\n    table,\n    isSelected,\n    items,\n    etc_field,\n  } = props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n\n  const handleItemChange = (item_index: number, next: string) => {\n    const _items = Array.from(items);\n    _items[item_index] = next;\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n  const handleInsertItem = (_index: number) => {\n    const _items = Array.from(items);\n    _items.splice(_index + 1, 0, '');\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n  const handleRemoveItem = (_index: number) => {\n    const _items = Array.from(items);\n    _items.splice(_index, 1);\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        items: _items,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"p-10\">\n        <div className=\"flex items-center space-x-2.5\">\n          <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n            <img\n              src={ColumnTypeToIconMap[type]}\n              alt=\"제목 아이콘\"\n              className=\"w-5 h-5\"\n            />\n            <span className=\"text-b3 text-gray400 w-5 text-center\">\n              {index + 1}\n            </span>\n          </div>\n          <InputBox\n            className=\"flex-1\"\n            placeholder=\"(필수) 제목을 입력해 주세요.\"\n            value={label}\n            onChange={(e) => handleChangeLabel(e.target.value)}\n          />\n          <div className=\"flex items-center space-x-2.5 pl-2.5\">\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n              <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n            </button>\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n              <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n            </button>\n            <Menu as=\"div\" className=\"relative w-6 h-6\">\n              <div className=\"w-6 h-6\">\n                <Menu.Button className=\"w-6 h-6\">\n                  <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n                </Menu.Button>\n              </div>\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenImageModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? imgBlue500 : img}\n                            alt=\"이미지\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            이미지 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenTableModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? tableFieldBlue500 : tableFieldGray600}\n                            alt=\"테이블\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            표 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                </Menu.Items>\n              </Transition>\n            </Menu>\n          </div>\n        </div>\n        <InputLine\n          placeholder=\"(선택) 설명을 입력해 주세요.\"\n          className=\"mt-5 w-full\"\n          value={description}\n          onChange={(e) => handleChangeDescription(e.target.value)}\n        />\n        {image && (\n          <img\n            src={image.url}\n            alt=\"이미지\"\n            className=\"w-full object-cover mt-5\"\n          />\n        )}\n        {table && (\n          <div className=\"mt-5\">\n            <Table data={table} onChange={handleChangeTable} />\n          </div>\n        )}\n        <AddImageModal\n          open={openImageModal}\n          onClose={() => setOpenImageModal(false)}\n          onSelect={handelSelectImage}\n        />\n        <AddTableModal\n          open={openTableModal}\n          onClose={() => setOpenTableModal(false)}\n          onSelect={handleAddTable}\n        />\n      </div>\n      <div\n        className=\"h-1\"\n        style={{\n          background: 'linear-gradient(180deg, #F2F2F7 0%, #FFFFFF 100%)',\n        }}\n      ></div>\n      <div className=\"p-10\">\n        <DragDropContext\n          onDragEnd={({ destination, source }) => {\n            const dest_droppableId = destination?.droppableId;\n            const source_droppableId = source?.droppableId;\n            if (\n              !destination ||\n              !source ||\n              dest_droppableId !== source_droppableId\n            ) {\n              return;\n            }\n\n            const _items = Array.from(items);\n\n            const [movedItem] = _items.splice(source.index, 1);\n            _items.splice(destination.index, 0, movedItem);\n            dispatch.updateItem({\n              section,\n              column: index,\n              data: {\n                items: _items,\n              },\n            });\n          }}\n        >\n          <Droppable droppableId={`section-${section}-column-${index}`}>\n            {({ droppableProps, innerRef, placeholder }) => {\n              return (\n                <div ref={innerRef} {...droppableProps}>\n                  {items.map((item, _index) => {\n                    return (\n                      <div key={_index}>\n                        <Draggable\n                          draggableId={`section-${section}-column-${index}-item-${_index}`}\n                          index={_index}\n                        >\n                          {({ draggableProps, innerRef, dragHandleProps }) => {\n                            return (\n                              <div\n                                ref={innerRef}\n                                {...draggableProps}\n                                className=\"pt-2.5\"\n                              >\n                                <div className=\"flex items-center\">\n                                  <div className=\"flex items-center mr-2.5\">\n                                    <div\n                                      {...dragHandleProps}\n                                      className=\"w-6 h-6\"\n                                    >\n                                      <img\n                                        src={move}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </div>\n                                    <p className=\"w-[18px] ml-[5px] text-gray600 text-b3\">\n                                      {_index + 1}\n                                    </p>\n                                  </div>\n                                  <InputBox\n                                    className=\"w-full\"\n                                    placeholder=\"(필수) 옵션을 입력해 주세요.\"\n                                    value={item}\n                                    onChange={(e) =>\n                                      handleItemChange(_index, e.target.value)\n                                    }\n                                  />\n                                  <div className=\"ml-5 flex items-center\">\n                                    <button\n                                      className=\"w-6 h-6 mr-2.5\"\n                                      type=\"button\"\n                                      onClick={() => handleInsertItem(_index)}\n                                    >\n                                      <img\n                                        src={GrayPlus}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </button>\n                                    <button\n                                      className=\"w-6 h-6\"\n                                      type=\"button\"\n                                      onClick={() => handleRemoveItem(_index)}\n                                    >\n                                      <img\n                                        src={deleteIcon}\n                                        alt=\"\"\n                                        className=\"w-6 h-6\"\n                                      />\n                                    </button>\n                                  </div>\n                                </div>\n                              </div>\n                            );\n                          }}\n                        </Draggable>\n                      </div>\n                    );\n                  })}\n                  {placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n        </DragDropContext>\n        {etc_field && (\n          <div className=\"pt-2.5\">\n            <div className=\"flex items-center\">\n              <p className=\"w-[18px] ml-[5px] text-gray600 text-b3\">\n                {items.length + 1}\n              </p>\n              <p className=\"text-b3\">기타</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { FC, useState, memo, useEffect } from 'react';\nimport { RangeSlide } from '../../RangeSlide';\n\ninterface RangePreviewProps {\n  fixed_slide?: boolean;\n  max: number;\n  min: number;\n}\n\nconst _RangePreview: FC<RangePreviewProps> = ({ fixed_slide, max, min }) => {\n  const [state, setState] = useState(fixed_slide ? [max] : [min, max]);\n\n  useEffect(() => {\n    if (fixed_slide === true && state.length > 1) {\n      setState([max]);\n    } else if (fixed_slide === true && (state[0] > max || state[0] < min)) {\n      setState([max]);\n    } else if (fixed_slide === false && (state[0] < min || state[1] > max)) {\n      setState([min, max]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [max, min, fixed_slide]);\n\n  return <RangeSlide max={max} min={min} value={state} onChange={setState} />;\n};\n\nexport const RangePreview = memo(_RangePreview);\n","import { Menu, Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { FC, useState, Fragment } from 'react';\nimport {\n  copy,\n  deleteIcon,\n  img,\n  imgBlue500,\n  more,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { AddTableModal } from '../../../modals/AddTableModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { NumberInputBox } from '../../NumberInputBox';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormSliderColumn } from '../types';\nimport { RangePreview } from './RangePreview';\nimport { Table } from './Table';\n\ninterface ColumnSliderEditorProps extends ServiceFormSliderColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnSliderEditor: FC<ColumnSliderEditorProps> = (props) => {\n  const {\n    description,\n    label,\n    type,\n    index,\n    section,\n    image,\n    table,\n    isSelected,\n    fixed_slide,\n    max_slide,\n    min_slide,\n  } = props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    console.log('copy', rest);\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n\n  const handleMinSlide = (next: number) => {\n    let next_min = next;\n    let next_max = max_slide;\n    if (next_min >= next_max) {\n      next_max = next_min + 1;\n    }\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        min_slide: next_min,\n        max_slide: next_max,\n      },\n    });\n  };\n\n  const handleMaxSlide = (next: number) => {\n    let next_min = min_slide;\n    let next_max = next;\n    if (next_min >= next_max) {\n      next_min = next_max - 1;\n    }\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        min_slide: next_min,\n        max_slide: next_max,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"p-10\">\n        <div className=\"flex items-center space-x-2.5\">\n          <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n            <img\n              src={ColumnTypeToIconMap[type]}\n              alt=\"제목 아이콘\"\n              className=\"w-5 h-5\"\n            />\n            <span className=\"text-b3 text-gray400 w-5 text-center\">\n              {index + 1}\n            </span>\n          </div>\n          <InputBox\n            className=\"flex-1\"\n            placeholder=\"(필수) 제목을 입력해 주세요.\"\n            value={label}\n            onChange={(e) => handleChangeLabel(e.target.value)}\n          />\n          <div className=\"flex items-center space-x-2.5 pl-2.5\">\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n              <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n            </button>\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n              <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n            </button>\n            <Menu as=\"div\" className=\"relative w-6 h-6\">\n              <div className=\"w-6 h-6\">\n                <Menu.Button className=\"w-6 h-6\">\n                  <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n                </Menu.Button>\n              </div>\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenImageModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? imgBlue500 : img}\n                            alt=\"이미지\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            이미지 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenTableModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? tableFieldBlue500 : tableFieldGray600}\n                            alt=\"테이블\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            표 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                </Menu.Items>\n              </Transition>\n            </Menu>\n          </div>\n        </div>\n        <InputLine\n          placeholder=\"(선택) 설명을 입력해 주세요.\"\n          className=\"mt-5 w-full\"\n          value={description}\n          onChange={(e) => handleChangeDescription(e.target.value)}\n        />\n        {image && (\n          <img\n            src={image.url}\n            alt=\"이미지\"\n            className=\"w-full object-cover mt-5\"\n          />\n        )}\n        {table && (\n          <div className=\"mt-5\">\n            <Table data={table} onChange={handleChangeTable} />\n          </div>\n        )}\n        <AddImageModal\n          open={openImageModal}\n          onClose={() => setOpenImageModal(false)}\n          onSelect={handelSelectImage}\n        />\n        <AddTableModal\n          open={openTableModal}\n          onClose={() => setOpenTableModal(false)}\n          onSelect={handleAddTable}\n        />\n      </div>\n      <div\n        className=\"h-1\"\n        style={{\n          background: 'linear-gradient(180deg, #F2F2F7 0%, #FFFFFF 100%)',\n        }}\n      ></div>\n      <div className=\"p-10\" key={`${fixed_slide}`}>\n        <RangePreview\n          fixed_slide={fixed_slide}\n          key={`section-${section}-column-${index}`}\n          min={min_slide}\n          max={max_slide}\n        />\n        <div className=\"flex justify-between\">\n          <NumberInputBox\n            className=\"w-[109px]\"\n            placeholder=\"(필수) 최소값\"\n            value={min_slide}\n            onChange={handleMinSlide}\n          />\n          <NumberInputBox\n            className=\"w-[109px]\"\n            placeholder=\"(필수) 최대값\"\n            value={max_slide}\n            onChange={handleMaxSlide}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { Menu, Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { FC, useState, Fragment } from 'react';\nimport {\n  copy,\n  deleteIcon,\n  img,\n  imgBlue500,\n  more,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { AddTableModal } from '../../../modals/AddTableModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { SpinnerInputBox } from '../../SpinnerInputBox';\n\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormSpinnerColumn } from '../types';\n\nimport { Table } from './Table';\n\ninterface ColumnSpinerEditorProps extends ServiceFormSpinnerColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnSpinerEditor: FC<ColumnSpinerEditorProps> = (props) => {\n  const {\n    description,\n    label,\n    type,\n    index,\n    section,\n    image,\n    table,\n    isSelected,\n    spinner_init,\n  } = props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n  const handleInitSpiner = (next: number) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        spinner_init: next,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"p-10\">\n        <div className=\"flex items-center space-x-2.5\">\n          <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n            <img\n              src={ColumnTypeToIconMap[type]}\n              alt=\"제목 아이콘\"\n              className=\"w-5 h-5\"\n            />\n            <span className=\"text-b3 text-gray400 w-5 text-center\">\n              {index + 1}\n            </span>\n          </div>\n          <InputBox\n            className=\"flex-1\"\n            placeholder=\"(필수) 제목을 입력해 주세요.\"\n            value={label}\n            onChange={(e) => handleChangeLabel(e.target.value)}\n          />\n          <div className=\"flex items-center space-x-2.5 pl-2.5\">\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n              <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n            </button>\n            <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n              <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n            </button>\n            <Menu as=\"div\" className=\"relative w-6 h-6\">\n              <div className=\"w-6 h-6\">\n                <Menu.Button className=\"w-6 h-6\">\n                  <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n                </Menu.Button>\n              </div>\n              <Transition\n                as={Fragment}\n                enter=\"transition ease-out duration-100\"\n                enterFrom=\"transform opacity-0 scale-95\"\n                enterTo=\"transform opacity-100 scale-100\"\n                leave=\"transition ease-in duration-75\"\n                leaveFrom=\"transform opacity-100 scale-100\"\n                leaveTo=\"transform opacity-0 scale-95\"\n              >\n                <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenImageModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? imgBlue500 : img}\n                            alt=\"이미지\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            이미지 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                  <Menu.Item>\n                    {({ active }) => (\n                      <button\n                        type=\"button\"\n                        className={classNames('block p-5 w-full text-left', {\n                          'bg-gray50 text-blue500': active,\n                        })}\n                        onClick={() => setOpenTableModal(true)}\n                      >\n                        <div className=\"flex items-center space-x-2.5\">\n                          <img\n                            src={active ? tableFieldBlue500 : tableFieldGray600}\n                            alt=\"테이블\"\n                            className=\"w-6 h-6\"\n                          />\n                          <span\n                            className={classNames('text-b3', {\n                              'text-blue500': active,\n                            })}\n                          >\n                            표 삽입\n                          </span>\n                        </div>\n                      </button>\n                    )}\n                  </Menu.Item>\n                </Menu.Items>\n              </Transition>\n            </Menu>\n          </div>\n        </div>\n        <InputLine\n          placeholder=\"(선택) 설명을 입력해 주세요.\"\n          className=\"mt-5 w-full\"\n          value={description}\n          onChange={(e) => handleChangeDescription(e.target.value)}\n        />\n        {image && (\n          <img\n            src={image.url}\n            alt=\"이미지\"\n            className=\"w-full object-cover mt-5\"\n          />\n        )}\n        {table && (\n          <div className=\"mt-5\">\n            <Table data={table} onChange={handleChangeTable} />\n          </div>\n        )}\n        <AddImageModal\n          open={openImageModal}\n          onClose={() => setOpenImageModal(false)}\n          onSelect={handelSelectImage}\n        />\n        <AddTableModal\n          open={openTableModal}\n          onClose={() => setOpenTableModal(false)}\n          onSelect={handleAddTable}\n        />\n      </div>\n      <div\n        className=\"h-1\"\n        style={{\n          background: 'linear-gradient(180deg, #F2F2F7 0%, #FFFFFF 100%)',\n        }}\n      ></div>\n      <div className=\"p-10\">\n        <SpinnerInputBox\n          value={spinner_init}\n          onChange={handleInitSpiner}\n          placeholder=\"(필수)시작값\"\n          className=\"ml-auto\"\n        />\n      </div>\n    </div>\n  );\n};\n","import { Menu, Transition } from '@headlessui/react';\nimport classNames from 'classnames';\nimport { FC, useState, Fragment } from 'react';\nimport {\n  copy,\n  deleteIcon,\n  img,\n  imgBlue500,\n  more,\n  tableFieldBlue500,\n  tableFieldGray600,\n} from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { AddTableModal } from '../../../modals/AddTableModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormTextColumn } from '../types';\nimport { Table } from './Table';\n\ninterface ColumnTextEditorProps extends ServiceFormTextColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnTextEditor: FC<ColumnTextEditorProps> = (props) => {\n  const { description, label, type, index, section, image, table, isSelected } =\n    props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const [openTableModal, setOpenTableModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n  const handleAddTable = (tableData: any) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: tableData,\n      },\n    });\n  };\n  const handleChangeTable = (\n    row_index: number,\n    col_index: number,\n    text: string\n  ) => {\n    if (table === null) {\n      return;\n    }\n\n    const _table = Array.from(table);\n    _table[row_index].rows[col_index] = text;\n\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        table: _table,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded p-10', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"flex items-center space-x-2.5\">\n        <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n          <img\n            src={ColumnTypeToIconMap[type]}\n            alt=\"제목 아이콘\"\n            className=\"w-5 h-5\"\n          />\n          <span className=\"text-b3 text-gray400 w-5 text-center\">\n            {index + 1}\n          </span>\n        </div>\n        <InputBox\n          className=\"flex-1\"\n          placeholder=\"(필수) 제목을 입력해 주세요.\"\n          value={label}\n          onChange={(e) => handleChangeLabel(e.target.value)}\n        />\n        <div className=\"flex items-center space-x-2.5 pl-2.5\">\n          <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n            <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n          </button>\n          <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n            <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n          </button>\n          <Menu as=\"div\" className=\"relative w-6 h-6\">\n            <div className=\"w-6 h-6\">\n              <Menu.Button className=\"w-6 h-6\">\n                <img src={more} alt=\"이미지 추가\" className=\"w-full h-full\" />\n              </Menu.Button>\n            </div>\n            <Transition\n              as={Fragment}\n              enter=\"transition ease-out duration-100\"\n              enterFrom=\"transform opacity-0 scale-95\"\n              enterTo=\"transform opacity-100 scale-100\"\n              leave=\"transition ease-in duration-75\"\n              leaveFrom=\"transform opacity-100 scale-100\"\n              leaveTo=\"transform opacity-0 scale-95\"\n            >\n              <Menu.Items className=\"absolute origin-top-right right-2.5 top-3 w-[200px] bg-white rounded-l shadow-1 border border-gray100 rounded-lg overflow-hidden\">\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      type=\"button\"\n                      className={classNames('block p-5 w-full text-left', {\n                        'bg-gray50 text-blue500': active,\n                      })}\n                      onClick={() => setOpenImageModal(true)}\n                    >\n                      <div className=\"flex items-center space-x-2.5\">\n                        <img\n                          src={active ? imgBlue500 : img}\n                          alt=\"이미지\"\n                          className=\"w-6 h-6\"\n                        />\n                        <span\n                          className={classNames('text-b3', {\n                            'text-blue500': active,\n                          })}\n                        >\n                          이미지 삽입\n                        </span>\n                      </div>\n                    </button>\n                  )}\n                </Menu.Item>\n                <Menu.Item>\n                  {({ active }) => (\n                    <button\n                      type=\"button\"\n                      className={classNames('block p-5 w-full text-left', {\n                        'bg-gray50 text-blue500': active,\n                      })}\n                      onClick={() => setOpenTableModal(true)}\n                    >\n                      <div className=\"flex items-center space-x-2.5\">\n                        <img\n                          src={active ? tableFieldBlue500 : tableFieldGray600}\n                          alt=\"테이블\"\n                          className=\"w-6 h-6\"\n                        />\n                        <span\n                          className={classNames('text-b3', {\n                            'text-blue500': active,\n                          })}\n                        >\n                          표 삽입\n                        </span>\n                      </div>\n                    </button>\n                  )}\n                </Menu.Item>\n              </Menu.Items>\n            </Transition>\n          </Menu>\n        </div>\n      </div>\n      <InputLine\n        placeholder=\"(선택) 설명을 입력해 주세요.\"\n        className=\"mt-5 w-full\"\n        value={description}\n        onChange={(e) => handleChangeDescription(e.target.value)}\n      />\n      {image && (\n        <img\n          src={image.url}\n          alt=\"이미지\"\n          className=\"w-full object-cover mt-5\"\n        />\n      )}\n      {table && (\n        <div className=\"mt-5\">\n          <Table data={table} onChange={handleChangeTable} />\n        </div>\n      )}\n      <AddImageModal\n        open={openImageModal}\n        onClose={() => setOpenImageModal(false)}\n        onSelect={handelSelectImage}\n      />\n      <AddTableModal\n        open={openTableModal}\n        onClose={() => setOpenTableModal(false)}\n        onSelect={handleAddTable}\n      />\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { FC, useState } from 'react';\nimport { copy, deleteIcon, img } from '../../../icons';\nimport { AddImageModal } from '../../../modals/AddImageModal';\nimport { InputBox } from '../../InputBox';\nimport { InputLine } from '../../InputLine';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { ColumnTypeToIconMap } from '../icons';\nimport { ServiceFormTitleColumn } from '../types';\n\ninterface ColumnTitleEditorProps extends ServiceFormTitleColumn {\n  section: number;\n  index: number;\n  isSelected?: boolean;\n}\n\nexport const ColumnTitleEditor: FC<ColumnTitleEditorProps> = (props) => {\n  const { description, label, type, index, section, image, isSelected } = props;\n  const [openImageModal, setOpenImageModal] = useState(false);\n  const dispatch = useFormDispatchContext();\n\n  const handleCopy = () => {\n    const { index, section, ...rest } = props;\n    dispatch.insertColumn(rest, section, index);\n  };\n\n  const handleRemove = () => {\n    dispatch.removeColumn(section, index);\n  };\n\n  const handleChangeLabel = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        label: next,\n      },\n    });\n  };\n  const handleChangeDescription = (next: string) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        description: next,\n      },\n    });\n  };\n  const handelSelectImage = (file: File & { url: string }) => {\n    dispatch.updateItem({\n      section,\n      column: index,\n      data: {\n        image: file,\n      },\n    });\n  };\n\n  return (\n    <div\n      className={classNames('bg-white rounded p-10', {\n        'border-blue500 border-2': isSelected,\n        'border border-gray100': !isSelected,\n      })}\n    >\n      <div className=\"flex items-center space-x-2.5\">\n        <div className=\"bg-gray100 px-2 py-1.5 space-x-0.5 flex items-center rounded\">\n          <img\n            src={ColumnTypeToIconMap[type]}\n            alt=\"제목 아이콘\"\n            className=\"w-5 h-5\"\n          />\n          <span className=\"text-b3 text-gray400 w-5 text-center\">\n            {index + 1}\n          </span>\n        </div>\n        <InputBox\n          className=\"flex-1\"\n          placeholder=\"(필수) 제목을 입력해 주세요.\"\n          value={label}\n          onChange={(e) => handleChangeLabel(e.target.value)}\n        />\n        <div className=\"flex items-center space-x-2.5 pl-2.5\">\n          <button\n            className=\"w-6 h-6\"\n            type=\"button\"\n            onClick={() => setOpenImageModal(true)}\n          >\n            <img src={img} alt=\"이미지 추가\" className=\"w-full h-full\" />\n          </button>\n          <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n            <img src={copy} alt=\"컬럼 복사\" className=\"w-full h-full\" />\n          </button>\n          <button className=\"w-6 h-6\" type=\"button\" onClick={handleRemove}>\n            <img src={deleteIcon} alt=\"컬럼 삭제\" className=\"w-full h-full\" />\n          </button>\n        </div>\n      </div>\n      <InputLine\n        placeholder=\"(선택) 설명을 입력해 주세요.\"\n        className=\"mt-5 w-full\"\n        value={description}\n        onChange={(e) => handleChangeDescription(e.target.value)}\n      />\n      {image && (\n        <img\n          src={image.url}\n          alt=\"이미지\"\n          className=\"w-full object-cover mt-5\"\n        />\n      )}\n      <AddImageModal\n        open={openImageModal}\n        onClose={() => setOpenImageModal(false)}\n        onSelect={handelSelectImage}\n      />\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { FC, useMemo, ReactNode } from 'react';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { useFormValueContext } from '../hooks/useFormValueContext';\nimport { FormColumnType, ServiceFormColumn } from '../types';\nimport { ColumnCheckboxEditor } from './ColumnCheckboxEditor';\nimport { ColumnDropDownEditor } from './ColumnDropDownEditor';\nimport { ColumnFileEditor } from './ColumnFileEditor';\nimport { ColumnLinearEditor } from './ColumnLinearEditor';\nimport { ColumnNumberEditor } from './ColumnNumberEditor';\nimport { ColumnRadioEditor } from './ColumnRadioEditor';\nimport { ColumnSliderEditor } from './ColumnSliderEditor';\nimport { ColumnSpinerEditor } from './ColumnSpinerEditor';\nimport { ColumnTextEditor } from './ColumnTextEditor';\nimport { ColumnTitleEditor } from './ColumnTitleEditor';\n\ninterface ColumnEditorProps {\n  section: number;\n  column: number;\n}\n\nconst Wrapper: FC<{\n  isSelected: boolean;\n  children: ReactNode;\n  onSelect: () => void;\n}> = ({ children, isSelected, onSelect }) => {\n  return (\n    <button\n      className=\"block text-left w-full\"\n      disabled={isSelected}\n      type=\"button\"\n      onClick={onSelect}\n    >\n      <div\n        className={classNames({ 'pointer-events-none': isSelected !== true })}\n      >\n        {children}\n      </div>\n    </button>\n  );\n};\n\nexport const ColumnEditor: FC<ColumnEditorProps> = ({ column, section }) => {\n  const value = useFormValueContext();\n  const dispatch = useFormDispatchContext();\n  const item = useMemo(() => {\n    return dispatch.getItem(section, column) as ServiceFormColumn | null;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value.data]);\n\n  const isSelected = useMemo(() => {\n    return (\n      value.select_item?.section === section &&\n      value.select_item?.column === column\n    );\n  }, [column, section, value.select_item?.column, value.select_item?.section]);\n\n  if (item === null) {\n    return null;\n  }\n\n  return (\n    <Wrapper\n      isSelected={isSelected}\n      onSelect={() => dispatch.selectItem({ section, column })}\n    >\n      {item.type === FormColumnType.TITLE && (\n        <ColumnTitleEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.TEXT && (\n        <ColumnTextEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.NUMBER && (\n        <ColumnNumberEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.FILE && (\n        <ColumnFileEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.DROPROWN && (\n        <ColumnDropDownEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.RADIO && (\n        <ColumnRadioEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.CHECKBOX && (\n        <ColumnCheckboxEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.SLIDE && (\n        <ColumnSliderEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.SPINNER && (\n        <ColumnSpinerEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n      {item.type === FormColumnType.LINEAR && (\n        <ColumnLinearEditor\n          {...item}\n          index={column}\n          section={section}\n          isSelected={isSelected}\n        />\n      )}\n    </Wrapper>\n  );\n};\n","import { FC, ReactNode } from 'react';\nimport { copyWhite, deleteWhiteIcon } from '../../../icons';\nimport { useFormDispatchContext } from '../hooks/useFormDispatchContext';\nimport { useFormValueContext } from '../hooks/useFormValueContext';\nimport { ServiceFormSection } from '../types';\nimport { ColumnEditor } from './ColumnEditor';\nimport { SectionInputBox } from './SectionInputBox';\nimport { SectionInputLine } from './SectionInputLine';\n\ninterface SectionEditorProps {\n  index: number;\n  section: ServiceFormSection;\n  total: number;\n}\n\nconst Wrapper: FC<{\n  isSelected: boolean;\n  children: ReactNode;\n  onSelect: () => void;\n}> = ({ children, isSelected, onSelect }) => {\n  if (isSelected === true) {\n    return <div>{children}</div>;\n  }\n  return (\n    <button className=\"block text-left w-full\" type=\"button\" onClick={onSelect}>\n      <div className=\"pointer-events-none\">{children}</div>\n    </button>\n  );\n};\n\nexport const SectionEditor: FC<SectionEditorProps> = ({\n  index,\n  section,\n  total,\n}) => {\n  const { select_item } = useFormValueContext();\n  const dispatch = useFormDispatchContext();\n  const isSelected =\n    select_item?.column === undefined && select_item?.section === index\n      ? true\n      : false;\n\n  const handleChangeLabel = (value: string) => {\n    dispatch.updateItem({ section: index, data: { label: value } });\n  };\n  const handleChangeDescription = (value: string) => {\n    dispatch.updateItem({ section: index, data: { description: value } });\n  };\n\n  const handleSelect = () => {\n    dispatch.selectItem({ section: index });\n  };\n  const handleCopy = () => {\n    dispatch.insertSection(section, index);\n  };\n  const handleRemove = () => {\n    dispatch.removeSection(index);\n  };\n\n  return (\n    <div className=\"space-y-5\">\n      <div>\n        <div className=\"rounded-t px-10 py-3 bg-gradient-to-b from-[#003876] to-[#001a58] inline-block\">\n          <p className=\"text-b3 font-bold text-white\">\n            <span className=\"text-yellow500\">{index + 1}</span>/\n            <span>{total}</span>\n          </p>\n        </div>\n        <Wrapper isSelected={isSelected} onSelect={handleSelect}>\n          <div className=\"bg-blue800 p-10 rounded rounded-tl-none\">\n            <div className=\"flex items-center space-x-5\">\n              <SectionInputBox\n                className=\"flex-1\"\n                placeholder=\"(필수) 섹션명을 입력해 주세요.\"\n                value={section.label}\n                onChange={(e) => handleChangeLabel(e.target.value)}\n              />\n              <div className=\"space-x-2.5 flex items-center\">\n                <button className=\"w-6 h-6\" type=\"button\" onClick={handleCopy}>\n                  <img src={copyWhite} className=\"w-full h-full\" alt=\"\" />\n                </button>\n                <button\n                  className=\"w-6 h-6\"\n                  type=\"button\"\n                  onClick={handleRemove}\n                >\n                  <img src={deleteWhiteIcon} className=\"w-full h-full\" alt=\"\" />\n                </button>\n              </div>\n            </div>\n            <SectionInputLine\n              className=\"mt-5 block w-full\"\n              placeholder=\"(선택) 설명을 입력해 주세요.\"\n              value={section.description}\n              onChange={(e) => handleChangeDescription(e.target.value)}\n            />\n          </div>\n        </Wrapper>\n      </div>\n      {section.column.map((_, _index) => {\n        return (\n          <ColumnEditor\n            column={_index}\n            section={index}\n            key={`${index}-${_index}`}\n          />\n        );\n      })}\n    </div>\n  );\n};\n","import { FC } from \"react\";\nimport { SectionEditor } from \"./components/SectionEditor\";\nimport { useFormValueContext } from \"./hooks/useFormValueContext\";\ninterface FormAreaProps {}\n\nexport const FormArea: FC<FormAreaProps> = () => {\n  const { data } = useFormValueContext();\n\n  return (\n    <div className=\"flex-1 py-10 bg-gray50 overflow-auto max-md:overflow-visible max-md:max-h-full\">\n      <div className=\"container-sm space-y-5\">\n        {data.map((section, index) => {\n          return (\n            <SectionEditor\n              section={section}\n              index={index}\n              total={data.length}\n              key={index}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { FC, useState, useCallback } from \"react\";\nimport { CreateServiceType } from \"../../pages/provider/service/create/types/service-create.types\";\nimport { ServiceFormContentManager } from \"./components/ServiceFormContentManager\";\nimport { EditorArea } from \"./EditorArea\";\nimport { FormDispatchContext, FormValueContext } from \"./form-context\";\nimport { FormArea } from \"./FormArea\";\nimport { ServiceFormColumn, ServiceFormSection } from \"./types\";\n\ninterface ServiceFormEditorProps {\n  value: ServiceFormSection[];\n  onChange: (next: ServiceFormSection[]) => void;\n  onChangeData?: (next: Partial<CreateServiceType>) => void;\n}\n\nexport const ServiceFormEditor: FC<ServiceFormEditorProps> = ({\n  value,\n  onChange,\n  onChangeData,\n}) => {\n  const updateData = (next: ServiceFormSection[]) => {\n    onChangeData?.({\n      form: next,\n    });\n  };\n\n  const [selectItem, setSelectItem] = useState<{\n    section: number;\n    column?: number;\n  } | null>(null);\n\n  const handleSelectItem = useCallback(\n    (opts: { section: number; column?: number }) => {\n      setSelectItem({\n        section: opts.section,\n        column: opts.column,\n      });\n    },\n    []\n  );\n\n  const handleGetItem = (section: number, column?: number) => {\n    const _section = value[section];\n    if (!_section) {\n      setSelectItem(null);\n      return null;\n    }\n    if (typeof column === \"number\") {\n      const _column = _section.column[column];\n\n      if (!_column) {\n        setSelectItem(null);\n        return null;\n      }\n      return _column;\n    }\n\n    return _section;\n  };\n\n  const handleUpdate = (opts: {\n    section: number;\n    column?: number;\n    data: Record<string, any>;\n    replace?: boolean;\n  }) => {\n    const _sections = Array.from(value);\n    const { data, section, column } = opts;\n    if (column === undefined) {\n      _sections[section] = {\n        ..._sections[section],\n        ...data,\n      };\n    } else if (column !== undefined && opts.replace !== true) {\n      _sections[section].column[column] = {\n        ..._sections[section].column[column],\n        ...data,\n      };\n    } else if (column !== undefined && opts.replace === true) {\n      _sections[section].column[column] = {\n        ...(data as any),\n      };\n    }\n    onChange(_sections);\n  };\n\n  const handleInsertSection = (item: ServiceFormSection, index: number) => {\n    const _section = Array.from(value);\n    _section.splice(index, 0, item);\n    setSelectItem(null);\n    onChange(_section);\n  };\n\n  const handleInsetColumn = (\n    item: ServiceFormColumn,\n    section_index: number,\n    column_index: number\n  ) => {\n    const _section = Array.from(value);\n    _section[section_index].column.splice(column_index, 0, item);\n    setSelectItem(null);\n    onChange(_section);\n  };\n\n  const handleRemoveSection = (index: number) => {\n    const _section = Array.from(value);\n    _section.splice(index, 1);\n    setSelectItem(null);\n    onChange(_section);\n  };\n\n  const handleRemoveColumn = (section_index: number, column_index: number) => {\n    const _section = Array.from(value);\n    _section[section_index].column.splice(column_index, 1);\n    setSelectItem(null);\n    onChange(_section);\n  };\n\n  return (\n    <FormValueContext.Provider\n      value={{\n        data: value,\n        select_item: selectItem,\n      }}\n    >\n      <FormDispatchContext.Provider\n        value={{\n          getItem: handleGetItem as any,\n          selectItem: handleSelectItem,\n          updateItem: handleUpdate,\n          insertSection: handleInsertSection,\n          insertColumn: handleInsetColumn,\n          removeColumn: handleRemoveColumn,\n          removeSection: handleRemoveSection,\n        }}\n      >\n        <div className=\"hidden max-xl:block max-xl:overflow-auto max-xl:px-2 max-xl:min-w-[300px] max-xl:max-h-[200px]\">\n          <ServiceFormContentManager\n            changeSections={updateData}\n            sections={value}\n          />\n        </div>\n        <div className=\"h-full overflow-auto max-md:overflow-visible flex max-md:flex-col-reverse\">\n          <FormArea />\n          <EditorArea />\n        </div>\n      </FormDispatchContext.Provider>\n    </FormValueContext.Provider>\n  );\n};\n","export type ServiceFormType = {\n  data: ServiceFormSection[];\n  select_item: {\n    section: number;\n    column?: number;\n  } | null;\n};\n\nexport type ServiceFormDispatchType = {\n  getItem:\n    | ((section: number) => ServiceFormSection | null)\n    | ((section: number, column: number) => ServiceFormColumn | null);\n  updateItem: (opts: {\n    section: number;\n    column?: number;\n    data: Record<string, any>;\n    replace?: boolean;\n  }) => void;\n  selectItem: (opts: { section: number; column?: number }) => void;\n  insertSection: (item: ServiceFormSection, index: number) => void;\n  insertColumn: (\n    item: ServiceFormColumn,\n    section_index: number,\n    column_index: number\n  ) => void;\n  removeSection: (index: number) => void;\n  removeColumn: (section_index: number, column_index: number) => void;\n};\n\nexport type ServiceFormSection = {\n  label: string;\n  description: string;\n  column: ServiceFormColumn[];\n};\n\nexport enum FormColumnType {\n  TEXT = 'text',\n  TITLE = 'title',\n  NUMBER = 'number',\n  FILE = 'file',\n  DROPROWN = 'droprown',\n  RADIO = 'radio',\n  CHECKBOX = 'checkbox',\n  SLIDE = 'slide',\n  SPINNER = 'spinner',\n  LINEAR = 'linear',\n}\n\nexport type ServiceFormColumn =\n  | ServiceFormTitleColumn\n  | ServiceFormNumberColumn\n  | ServiceFormTextColumn\n  | ServiceFormFileUploadColumn\n  | ServiceFormDropDownColumn\n  | ServiceFormRadioColumn\n  | ServiceFormCheckboxColumn\n  | ServiceFormSliderColumn\n  | ServiceFormSpinnerColumn\n  | ServiceFormLinearColumn;\n\nexport type ServiceFormTitleColumn = {\n  type: FormColumnType.TITLE;\n  label: string;\n  description: string;\n  image?: null | (File & { url: string });\n};\n\nexport type ServiceFormNumberColumn = {\n  type: FormColumnType.NUMBER;\n  label: string;\n  description: string;\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n  required: boolean;\n};\n\nexport type ServiceFormTextColumn = {\n  type: FormColumnType.TEXT;\n  label: string;\n  description: string;\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n  required: boolean;\n};\n\nexport type ServiceFormFileUploadColumn = {\n  type: FormColumnType.FILE;\n  label: string;\n  description: string;\n  required: boolean;\n  allow_mime: string[];\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n  limit_file_number: number;\n  limit_file_size: number;\n};\n\nexport type ServiceFormDropDownColumn = {\n  type: FormColumnType.DROPROWN;\n  label: string;\n  description: string;\n  required: boolean;\n  items: string[];\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n};\n\nexport type ServiceFormRadioColumn = {\n  type: FormColumnType.RADIO;\n  label: string;\n  description: string;\n  required: boolean;\n  items: string[];\n  etc_field: boolean;\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n};\n\nexport type ServiceFormCheckboxColumn = {\n  type: FormColumnType.CHECKBOX;\n  label: string;\n  description: string;\n  required: boolean;\n  items: string[];\n  etc_field: boolean;\n  max_checkbox_count: number;\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n};\n\nexport type ServiceFormSliderColumn = {\n  type: FormColumnType.SLIDE;\n  label: string;\n  description: string;\n  required: boolean;\n  fixed_slide: boolean;\n  min_slide: number;\n  max_slide: number;\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n};\n\nexport type ServiceFormSpinnerColumn = {\n  type: FormColumnType.SPINNER;\n  label: string;\n  description: string;\n  required: boolean;\n  spinner_init: number;\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n};\n\nexport type ServiceFormLinearColumn = {\n  type: FormColumnType.LINEAR;\n  label: string;\n  description: string;\n  required: boolean;\n  min_linear: number;\n  max_linear: number;\n  min_linear_label: string;\n  max_linear_label: string;\n  image: null | (File & { url: string });\n  table: Array<{ rows: string[] }> | null;\n};\n","import classNames from \"classnames\";\nimport { FC } from \"react\";\nimport { NumericFormat } from \"react-number-format\";\nimport { grayDownTriangle, grayUpTriangle } from \"../../icons\";\n\ninterface SpinnerInputBoxProps {\n  className?: string;\n  placeholder?: string;\n  value: number;\n  onChange?: (next: number) => void;\n  disabled?: boolean;\n}\n\nexport const SpinnerInputBox: FC<SpinnerInputBoxProps> = ({\n  value,\n  className,\n  onChange,\n  placeholder,\n  disabled,\n}) => {\n  const handleIncrease = () => {\n    onChange?.(value + 1);\n  };\n  const handleDecrease = () => {\n    onChange?.(value - 1);\n  };\n  return (\n    <div\n      className={classNames(\n        \"rounded overflow-hidden flex border border-gray300 max-w-[140px]\",\n        className\n      )}\n    >\n      <NumericFormat\n        disabled={disabled}\n        placeholder={placeholder}\n        value={value}\n        onValueChange={(e) => {\n          onChange?.(typeof e.floatValue === \"undefined\" ? 0 : e.floatValue);\n        }}\n        className=\"!bg-white w-[114px] text-b3 placeholder:text-gray300 py-3 px-[15px]\"\n      />\n      <div className=\"border-l border-gray300\">\n        <button\n          disabled={disabled}\n          className=\"w-6 h-6 border-b border-gray300 flex items-center justify-center\"\n          type=\"button\"\n          onClick={handleIncrease}\n        >\n          <img\n            src={grayUpTriangle}\n            className=\"w-4 h-4 object-contain\"\n            alt=\"증가\"\n          />\n        </button>\n        <button\n          disabled={disabled}\n          className=\"w-6 h-6 flex items-center justify-center\"\n          type=\"button\"\n          onClick={handleDecrease}\n        >\n          <img src={grayDownTriangle} className=\"w-4 h-4\" alt=\"감소\" />\n        </button>\n      </div>\n    </div>\n  );\n};\n"],"names":["LinearSlide","maxValue","minValue","value","onChange","disabled","className","Range","step","min","max","values","next","renderTrack","props","children","onMouseDown","onTouchStart","style","height","display","width","ref","borderRadius","background","getTrackBackground","colors","alignSelf","renderThumb","isDragged","backgroundColor","boxShadow","renderMark","RangeSlide","length","index","border","classNames","toFixed","SectionInputBox","SectionInputLine","ColumnTypeToIconMap","FormColumnType","title","textField","numberField","fileupload","dropdown","radioField","cehckbox","sliderField","spinerField","linearField","TypeToStrMap","ColumnItem","draggableId","type","onCopy","onRemove","provided","innerRef","draggableProps","dragHandleProps","src","move","alt","fontSize","lineHeight","onClick","copy","deleteIcon","SectionItem","column","onCopyColumn","onRemoveColumn","section02","droppableId","droppableProps","map","item","_index","placeholder","removeItem","arr","splice","insertItem","parseDroppableIdToIndex","id","startsWith","Error","_id","replace","parseInt","ServiceFormContentManager","sections","changeSections","_sections","Array","from","push","description","label","section","_section","image","required","table","GrayPlus","onDragEnd","result","destination","source","section_index","_columns","fromIndex","destIndex","moveItemEqualSection","sourceSectionIndex","destSectionIndex","next_sections","removed_source_columns","moveItem","inserted_dest_column","key","copySection","removeSection","coulumn_index","copyColumn","removeColumn","FormValueContext","createContext","undefined","FormDispatchContext","useFormDispatchContext","context","useContext","CheckboxSettingEditor","etc_field","items","max_checkbox_count","dispatch","dropdownData","v","i","toString","useLayoutEffect","updateItem","data","InputToggle","DropDown","DropdownSettingEditor","FileSettingEditor","allow_mime","limit_file_number","limit_file_size","allowBoolean","dicomAllowed","includes","imgAllowed","miiAllowed","gifAllowed","handleAllowMimeCheckbox","field","_next","filter","CheckBox","NumberInputBox","onValueChange","e","floatValue","LinearSettingEditor","max_linear","min_linear","max_linear_label","min_linear_label","next_min","next_max","InputBox","target","NumberSettingEditor","RadioSettingEditor","SlideSettingEditor","fixed_slide","min_slide","max_slide","SpinerSettingEditor","spinner_init","TextSettingEditor","useFormValueContext","EditorAreaSetting","useMemo","getItem","TYPE","TypeToInitDataMap","EditorArea","select_item","Object","hasOwn","grayDownTriangle","_item","open","maxHeight","itemIndex","active","FILE_ACCEPT","AddImageModal","onClose","onSelect","useId","useState","show","message","modal","setModal","showModal","appear","as","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","htmlFor","hidden","accept","file","files","handleFiles","isVerifyMIME","split","verifyMIME","url","URL","createObjectURL","_file","assign","updateFile","AlertModal","prev","AddTableModal","row","setRow","setColumn","handleClose","Button","test","num_row","num_column","handleValidate","va","fill","rows","TableView","styled","Table","row_index","col_index","ColumnCheckboxEditor","isSelected","openImageModal","setOpenImageModal","openTableModal","setOpenTableModal","rest","insertColumn","more","imgBlue500","img","tableFieldBlue500","tableFieldGray600","InputLine","text","_table","tableData","dest_droppableId","source_droppableId","_items","movedItem","item_index","handleItemChange","handleInsertItem","handleRemoveItem","ColumnDropDownEditor","ColumnFileEditor","LinearPreview","state","setState","useEffect","ColumnLinearEditor","maxWidth","ColumnNumberEditor","ColumnRadioEditor","_RangePreview","RangePreview","memo","ColumnSliderEditor","console","log","ColumnSpinerEditor","SpinnerInputBox","ColumnTextEditor","ColumnTitleEditor","Wrapper","ColumnEditor","selectItem","SectionEditor","total","insertSection","copyWhite","deleteWhiteIcon","_","FormArea","ServiceFormEditor","onChangeData","setSelectItem","handleSelectItem","useCallback","opts","Provider","_column","column_index","form","grayUpTriangle"],"sourceRoot":""}