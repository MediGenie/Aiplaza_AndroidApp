{"version":3,"file":"static/js/776.6bfab5c7.chunk.js","mappings":"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","sources":["components/FormikComponent/FormikInputBox.tsx","components/FormikComponent/FormikInputArea.tsx","components/FormikComponent/FormikDropDown.tsx","pages/sign-in.tsx","hooks/useSocialLogin.ts"],"sourcesContent":["import { useField } from 'formik';\nimport { DetailedHTMLProps, FC, InputHTMLAttributes } from 'react';\nimport { InputBox } from '../InputBox';\n\ninterface FormikInputBoxProps\n  extends Omit<\n    DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>,\n    'type' | 'value' | 'onChange' | 'onBlur' | 'name'\n  > {\n  error?: boolean;\n  secure?: boolean;\n  name: string;\n}\n\nexport const FormikInputBox: FC<FormikInputBoxProps> = ({ name, ...props }) => {\n  const [formik_props, meta] = useField(name);\n  return (\n    <div>\n      <InputBox {...props} {...formik_props} error={!!meta.error} />\n      {meta.error && <p className=\"error-msg\">{meta.error}</p>}\n    </div>\n  );\n};\n","import { useField } from \"formik\";\nimport { DetailedHTMLProps, FC, TextareaHTMLAttributes } from \"react\";\nimport { InputArea } from \"../InputArea\";\n\ninterface FormikInputAreaProps\n  extends Omit<\n    DetailedHTMLProps<\n      TextareaHTMLAttributes<HTMLTextAreaElement>,\n      HTMLTextAreaElement\n    >,\n    \"type\" | \"value\" | \"onChange\" | \"onBlur\" | \"name\"\n  > {\n  error?: boolean;\n  name: string;\n}\n\nexport const FormikInputArea: FC<FormikInputAreaProps> = ({\n  name,\n  ...props\n}) => {\n  const [formik_props, meta] = useField(name);\n  return (\n    <div>\n      <InputArea {...props} {...formik_props} error={!!meta.error} />\n      {meta.error && <p className=\"error-msg\">{meta.error}</p>}\n    </div>\n  );\n};\n","import { useField } from 'formik';\nimport { FC } from 'react';\nimport { DropDown, DropDownData } from '../DropDown';\n\ninterface FormikDropdownProps {\n  placeholder?: string;\n  className?: string;\n  name: string;\n  data: DropDownData[];\n}\n\nexport const FormikDropdown: FC<FormikDropdownProps> = ({\n  name,\n  data,\n  className,\n  placeholder,\n}) => {\n  const [props, meta, helper] = useField(name);\n  const handleChange = (value: any) => helper.setValue(value);\n  return (\n    <div>\n      <DropDown\n        data={data}\n        value={props.value}\n        onChange={handleChange}\n        className={className}\n        placeholder={placeholder}\n        error={!!meta.error}\n      />\n      {meta.error && <p className=\"error-msg\">{meta.error}</p>}\n    </div>\n  );\n};\n","import classNames from \"classnames\";\nimport { error } from \"console\";\nimport { Form, FormikProvider, useFormik } from \"formik\";\nimport { FC, useState, useCallback } from \"react\";\nimport { Link, useNavigate, useLocation } from \"react-router-dom\";\nimport { ApiError } from \"../apis/api-error\";\nimport { useAuthDispatch } from \"../auth/hooks\";\nimport { UserType } from \"../auth/type\";\nimport { Button } from \"../components/Button\";\nimport { CheckBox } from \"../components/CheckBox\";\nimport { FormikInputBox } from \"../components/FormikComponent\";\nimport { useSocialLogin } from \"../hooks/useSocialLogin\";\nimport {\n  AppleSignInIcon,\n  blueRightArrow,\n  GoogleSignInIcon,\n  LoginTypeSelectIcon,\n  NaverSignInIcon,\n} from \"../icons\";\nimport { AlertModal } from \"../modals\";\nimport { SocialType } from \"../types/social.type\";\n\ninterface SignInProps {}\n\nconst SignIn: FC<SignInProps> = () => {\n  const location = useLocation();\n  const [isPersist, setIsPersist] = useState(false);\n  const [selectType, setSelectType] = useState<UserType>(\n    location?.state?.userType || UserType.PROVIDER\n  );\n  const authdispatch = useAuthDispatch();\n  const [modal, setModal] = useState({ show: false, message: \"\" });\n  const showModal = (msg: string) => {\n    setModal({ show: true, message: msg });\n  };\n  const hideModal = () => {\n    setModal((prev) => ({ ...prev, show: false }));\n  };\n  const navigate = useNavigate();\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n      password: \"\",\n    },\n    onSubmit: async (values) => {\n      authdispatch\n        .login(values.username, values.password, selectType, isPersist)\n        .catch((e) => {\n          if (e.message === \"Unauthorized\") {\n            showModal(\"비밀번호와 아이디를 올바르게 입력해주세요\");\n          } else {\n            showModal(e.message);\n          }\n        });\n    },\n  });\n\n  const handleGetSocialData = useCallback(\n    (opts: {\n      id: string;\n      type: SocialType;\n      account_type: \"provider\" | \"consumer\";\n      email?: string;\n    }) => {\n      return authdispatch\n        .socialLogin(\n          opts.id,\n          opts.type,\n          opts.account_type,\n          isPersist,\n          opts?.email\n        )\n        .catch((e: ApiError) => {\n          if (e.type === \"redirect\") {\n            navigate(\"/sign-up\", {\n              state: {\n                method: opts.type,\n                type:\n                  opts.account_type === \"provider\"\n                    ? UserType.PROVIDER\n                    : UserType.CONSUMER,\n                social_key: opts.id,\n                email: opts.email,\n              },\n            });\n          } else {\n            console.log(e.message);\n            showModal(e.message);\n          }\n        });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [authdispatch, isPersist]\n  );\n\n  const { socialPopupOpen } = useSocialLogin(handleGetSocialData);\n  const handleGoogleSignIn = () => {\n    socialPopupOpen(selectType, \"google\");\n  };\n\n  const handleNaverSignIn = () => {\n    console.log(selectType);\n    socialPopupOpen(selectType, \"naver\");\n  };\n\n  const handleAppleSignIn = () => {\n    socialPopupOpen(selectType, \"apple\");\n  };\n\n  return (\n    <div className=\"py-20 bg-white\">\n      <AlertModal\n        open={modal.show}\n        message={modal.message}\n        title=\"알림\"\n        onClose={hideModal}\n      />\n      <div className=\"container\">\n        <div\n          className=\"bg-white rounded w-full mx-auto\"\n          style={{\n            maxWidth: 408,\n            boxShadow: \"0px 5px 18px 2px rgba(72, 72, 74, 0.1)\",\n          }}\n        >\n          <div className=\"flex\">\n            <button\n              className={classNames(\"flex-1 p-[14px] rounded-tl relative\", {\n                \"bg-gray800\": selectType === UserType.PROVIDER,\n                \"bg-gray50\": selectType !== UserType.PROVIDER,\n              })}\n              onClick={() => {\n                setSelectType(UserType.PROVIDER);\n              }}\n              type=\"button\"\n            >\n              <span\n                className={classNames(\"font-medium text-b3\", {\n                  \"text-white\": selectType === UserType.PROVIDER,\n                  \"text-gray400\": selectType !== UserType.PROVIDER,\n                })}\n              >\n                서비스제공자\n              </span>\n              {selectType === UserType.PROVIDER && (\n                <img\n                  src={LoginTypeSelectIcon}\n                  alt=\"\"\n                  className=\"w-2.5 h-2 absolute -bottom-[1px] left-1/2 -translate-x-1/2\"\n                />\n              )}\n            </button>\n            <button\n              className={classNames(\"flex-1 p-[14px] rounded-tr relative\", {\n                \"bg-gray800\": selectType === UserType.CONSUMER,\n                \"bg-gray50\": selectType !== UserType.CONSUMER,\n              })}\n              onClick={() => {\n                setSelectType(UserType.CONSUMER);\n              }}\n              type=\"button\"\n            >\n              <span\n                className={classNames(\"font-medium text-b3\", {\n                  \"text-white\": selectType === UserType.CONSUMER,\n                  \"text-gray400\": selectType !== UserType.CONSUMER,\n                })}\n              >\n                일반회원\n              </span>\n              {selectType === UserType.CONSUMER && (\n                <img\n                  src={LoginTypeSelectIcon}\n                  alt=\"\"\n                  className=\"w-2.5 h-2 absolute -bottom-[1px] left-1/2 -translate-x-1/2\"\n                />\n              )}\n            </button>\n          </div>\n          <div className=\"p-10\">\n            <FormikProvider value={formik}>\n              <Form>\n                <h2 className=\"text-h2 font-bold text-center\">로그인</h2>\n                <div className=\"mt-10 space-y-2.5\">\n                  <FormikInputBox\n                    name=\"username\"\n                    className=\"w-full block\"\n                    placeholder=\"아이디(이메일)을 입력해 주세요.\"\n                  />\n                  <FormikInputBox\n                    name=\"password\"\n                    className=\"w-full block\"\n                    placeholder=\"비밀번호를 입력해 주세요.\"\n                    secure\n                  />\n                </div>\n                <Button type=\"submit\" className=\"mt-5 w-full block\">\n                  로그인\n                </Button>\n              </Form>\n            </FormikProvider>\n            <div className=\"mt-2.5 flex justify-between\">\n              <div className=\"flex items-center space-x-2.5\">\n                <CheckBox value={isPersist} onChange={setIsPersist} />\n                <span className=\"text-gray800 text-b3\">로그인 유지하기</span>\n              </div>\n              <Link\n                to=\"/find-pw\"\n                state={{ type: selectType }}\n                className=\"text-b3 text-gray800\"\n              >\n                비밀번호 찾기\n              </Link>\n            </div>\n            <div className=\"mt-20 pb-10 border-b border-gray200\">\n              <p className=\"text-b3 text-gray400 text-center\">\n                SNS 계정으로 로그인\n              </p>\n              <div className=\"mt-5 flex items-center justify-center space-x-5\">\n                <button\n                  className=\"w-15 h-15\"\n                  type=\"button\"\n                  onClick={handleGoogleSignIn}\n                >\n                  <img\n                    src={GoogleSignInIcon}\n                    alt=\"구글 로그인\"\n                    className=\"w-full h-full\"\n                  />\n                </button>\n                <button\n                  className=\"w-15 h-15\"\n                  type=\"button\"\n                  onClick={handleNaverSignIn}\n                >\n                  <img\n                    src={NaverSignInIcon}\n                    alt=\"네이버 로그인\"\n                    className=\"w-full h-full\"\n                  />\n                </button>\n                <button\n                  className=\"w-15 h-15\"\n                  type=\"button\"\n                  onClick={handleAppleSignIn}\n                >\n                  <img\n                    src={AppleSignInIcon}\n                    alt=\"애플 로그인\"\n                    className=\"w-full h-full\"\n                  />\n                </button>\n              </div>\n            </div>\n            <div className=\"mt-10 text-center\">\n              <Link\n                className=\"inline-flex justify-center items-center\"\n                to=\"/sign-up\"\n                state={{\n                  method: \"email\",\n                  type: selectType,\n                }}\n              >\n                <p className=\"text-center text-b2 text-blue500 font-medium\">\n                  회원가입\n                </p>\n                <img\n                  src={blueRightArrow}\n                  className=\"block w-4 h-4\"\n                  alt=\"회원가입\"\n                />\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SignIn;\n","import { useLayoutEffect } from \"react\";\nimport { UserType } from \"../auth/type\";\nimport { config } from \"../config\";\nimport { SocialType } from \"../types/social.type\";\n\nconst POPUP_OPTION =\n  \"top=100, left=300, width=500, height=600, toolbar=no, menubar=no, location=no, status=no, scrollbars=no, resizable=no\";\n\nexport function useSocialLogin(\n  onSuccess?: (opts: {\n    id: string;\n    type: SocialType;\n    account_type: \"provider\" | \"consumer\";\n    email?: string;\n  }) => void\n) {\n  const socialPopupOpen = (account_type: UserType, type: SocialType) => {\n    if (window) {\n      const url = `http://${\n        config.BASE_API_URL\n      }/auth/sign-in/${account_type.toLowerCase()}/${type}`;\n      window.open(url, \"소셜 로그인\", POPUP_OPTION);\n    }\n  };\n\n  useLayoutEffect(() => {\n    if (window) {\n      let mounted = true;\n      const socialLoginCallback = (\n        event: MessageEvent<{\n          type: string;\n          data: {\n            id: string;\n            type: SocialType;\n            account_type: \"provider\" | \"consumer\";\n            email?: string;\n          };\n        }>\n      ) => {\n        if (event?.data?.type === \"social_login_callback\" && mounted === true) {\n          const { id, type, account_type, email } = event.data.data;\n\n          if (window) {\n            onSuccess &&\n              onSuccess({\n                id: id,\n                type: type,\n                account_type: account_type,\n                email: email,\n              });\n          }\n        }\n      };\n      window.addEventListener(\"message\", socialLoginCallback, false);\n      return () => {\n        mounted = false;\n        if (window) {\n          window.removeEventListener(\"message\", socialLoginCallback, false);\n        }\n      };\n    }\n  }, [onSuccess]);\n\n  return {\n    socialPopupOpen,\n  };\n}\n"],"names":["FormikInputBox","name","props","useField","formik_props","meta","InputBox","error","className","FormikInputArea","InputArea","FormikDropdown","data","placeholder","helper","DropDown","value","onChange","setValue","onSuccess","location","useLocation","useState","isPersist","setIsPersist","state","userType","UserType","selectType","setSelectType","authdispatch","useAuthDispatch","show","message","modal","setModal","showModal","msg","navigate","useNavigate","formik","useFormik","initialValues","username","password","onSubmit","values","login","catch","e","handleGetSocialData","useCallback","opts","socialLogin","id","type","account_type","email","method","social_key","console","log","useLayoutEffect","window","mounted","socialLoginCallback","event","addEventListener","removeEventListener","socialPopupOpen","url","config","toLowerCase","open","title","onClose","prev","style","maxWidth","boxShadow","classNames","onClick","src","LoginTypeSelectIcon","alt","secure","Button","CheckBox","to","GoogleSignInIcon","NaverSignInIcon","AppleSignInIcon","blueRightArrow"],"sourceRoot":""}